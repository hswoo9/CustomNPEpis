<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- BizboxA mariaDB 회계(비영리) 카드 -->
<mapper namespace="NpAdminCard">

	<select id="NpAdminCard.GetNotUseList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.GetNotUseList */]]>
		<![CDATA[/* 카드 내역 미사용 처리 목록 조회 */]]>

		<![CDATA[
			/* ## SELECT ## */
			SELECT  IFNULL(sync_id, 0) AS syncId
		]]>
		
		<![CDATA[
			/* ## FROM ## */
			FROM    NEOS.t_ex_card_transfer
		]]>
		
		<![CDATA[
			/* ## WHERE ## */
			WHERE   auth_date BETWEEN #{cardAuthDateFrom} AND #{cardAuthDateTo}
			AND     comp_seq = #{compSeq}	
			AND     use_yn = 'N'
			AND     sync_id IS NOT NULL
		]]>
		
		<![CDATA[
			/* ## GROUP ## */
			GROUP   BY sync_id
		]]>
	</select>

	<select id="NpAdminCard.GetCardList2FullList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.GetCardList2FullList */
		/* 법인카드 승인내역 전체 현황 조회 */
		SELECT
			card.sync_id				AS syncId
			 , card.iss_dt
			 , card.iss_sq
			, CASE card.georae_stat 
				WHEN '1' THEN 'N' 
				WHEN '0' THEN 'Y'
				ELSE card.georae_stat 
			 END AS georaeStat /* 구분 ( 승인 / 취소 ) */
			, ( CASE
				WHEN IFNULL(georae_stat, '') = 'Y' OR IFNULL(georae_stat, '') = '0' 
				THEN '취소'
				ELSE '승인'
			END )	AS georaeStatName
			, card.georae_coll	AS georaeColl
			, card.auth_date	AS authDate /* 승인일시 */
			, card.auth_time	AS authTime
			, card.auth_num		AS authNum /* 승인번호 */
			, card.merc_name	AS partnerName /* 사용처 */
			, card.merc_saup_no	AS partnerNo /* 사업자번호 */
			, c.card_name		AS cardName /* 카드명 */
			, card.card_num		AS cardNum /* 카드번호 */
			, card.request_amount	AS reqAmt /* 금액 */
			, card.amt_md_amount	AS stdAmt /* 공급가액 */
			, card.vat_md_amount	AS vatAmt /* 부가세 */
			, card.ser_amount	AS serAmount /* 서비스 금액 */
			, '' 			AS cardPublicYn /* 공개범위 여부 */
			, card.sync_id 		AS syncId /* 카드 내역 고유 아이디 */
			, c.card_code		AS cardCode /* 카드 코드 */
			, IFNULL(send.form_seq, '')			AS formSeq
			
			, IFNULL(send.doc_seq, '')		AS docSeq
			, IFNULL(send.doc_emp_name, '') 	AS docEmpName
			, IFNULL(send.doc_emp_name, '') 	AS sendEmpName
			, IFNULL(send.doc_no, '') 		AS docNo
			, IFNULL(send.doc_title, '')		AS docTitle
			, IFNULL(send.doc_status, '')		AS docStatus
			, IFNULL(send.use_code, '')		AS sendYN
			, IFNULL(send.use_code, '')		AS sendYn
			, IFNULL(send.use_code, '')		AS send_yn
			, IFNULL(send.use_code, '')		AS approYN
			, IFNULL(send.use_code, '')		AS approYn
			, IFNULL(send.use_code, '')		AS appro_yn
			, IFNULL(notUse.not_use_emp_name, '')	AS notUseEmpName
			, IFNULL(notUse.use_code, 'Y')		AS useYN
			, IFNULL(notUse.use_code, 'Y')		AS useYn
			, IFNULL(notUse.use_code, 'Y')		AS use_yn
			, IFNULL(receive.transfer_name, '')	AS transferName
			, IFNULL(receive.use_code, '')		AS receiveYN
			, IFNULL(receive.use_code, '')		AS receiveYn
			, IFNULL(receive.use_code, '')		AS receive_yn
			, IFNULL(send.res_note, '') AS res_note
		FROM    NEOS.t_ex_card_aq_tmp card
		LEFT	JOIN NEOS.t_ex_card c
		ON	card.card_num = replace(c.card_num,'-','')
		LEFT	JOIN (
			SELECT	DISTINCT
				'Y'	AS use_code
				, sync_id
				, IFNULL(d.doc_seq, '')	AS doc_seq
				, IFNULL((SELECT emp_name FROM NEOS.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = d.emp_seq), '') AS doc_emp_name
				, d.doc_no
				, IFNULL(ar.c_riaftertitle, ta.doc_title) AS doc_title
				, doc_status
				, IFNULL(ta.form_id, '') form_seq
				, IFNULL(rh.res_note, '') res_note
			FROM 	NEOS.t_ex_card_aq_tmp	c
			INNER JOIN	NEOS.t_exnp_restrade t
			ON	c.sync_id = t.interface_seq
			INNER JOIN	NEOS.t_exnp_resdoc	d
			ON	d.res_doc_seq = t.res_doc_seq
			INNER JOIN NEOS.t_exnp_reshead rh
			ON t.res_seq = rh.res_seq
			LEFT JOIN NEOS.a_recordinfo ar
			ON	d.doc_seq = ar.c_dikeycode
			LEFT JOIN NEOS.teag_appdoc ta
			ON	d.doc_seq = ta.doc_id	
			WHERE	d.doc_seq IS NOT NULL
			 AND	IFNULL(t.interface_type, '') = 'card'
			 AND	IFNULL(d.doc_status, '008') IN ( '001', '002', '003', '004', '008', '009','20', '30', '90' )
			 AND	IFNULL(del_yn, 'N')	= 'N'
		)	send
		ON	card.sync_id = send.sync_id		
		LEFT JOIN	(
			SELECT	
				'Y'	AS use_code
				, sync_id	AS sync_id
				, transfer_name	AS transfer_name
			FROM	NEOS.t_ex_card_transfer  t
			WHERE	IFNULL(use_yn, 'Y')  = 'Y'
			 AND 	IFNULL(receive_seq, '') != ''
		)	receive
		ON	card.sync_id = receive.sync_id		
		LEFT JOIN	(
			SELECT	
				'N'		AS use_code
				, sync_id	AS sync_id
				, IFNULL((SELECT emp_name FROM NEOS.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = aq.use_yn_emp_seq), '')	AS not_use_emp_name
			FROM	NEOS.t_ex_card_transfer	aq
			 WHERE	IFNULL(use_yn, 'N')  = 'N'
		)	notUse
		ON	card.sync_id = notUse.sync_id			
		WHERE   card.auth_date BETWEEN #{cardAuthDateFrom} AND #{cardAuthDateTo}
		<if test="authNumLength != null and authNumLength != ''">
			AND LENGTH(card.auth_num) = #{authNumLength}
		</if>

		GROUP BY card.card_num, card.auth_date, card.auth_num, card.auth_time, card.georae_stat, card.georae_coll
		ORDER BY auth_date DESC, auth_time DESC 
	</select>

	<select id="NpAdminCard.GetCardList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.GetCardList */]]>
		<![CDATA[/* 카드 내역 현황 조회 ( 관리자 ) */]]>
		
		<![CDATA[
			/* ## SELECT - 01 ## */
			SELECT	*
		]]>
		
		<![CDATA[
			/* ## FROM - 01 ## */
			FROM	(
		]]>
		
					<![CDATA[
						/* ## SELECT - 02 ## */
						SELECT  sync_id AS syncId
						        , CASE
						                WHEN IFNULL(A.georae_stat, '') IN ( 'Y', '0' ) THEN '취소'
						                WHEN IFNULL(A.georae_stat, '') IN ( 'N', '1' ) THEN '승인'
						                ELSE '-'
						        END AS georaeStatName /* 구분 명칭 */
						        , B.card_code
						        , A.georae_coll
						        , A.send_yn
						        , A.georae_stat AS georaeStat /* 구분 코드 */
						        , A.auth_date AS authDate /* 승인일자 */
						        , A.auth_time AS authTime /* 승인시간 */
						        , A.auth_num AS authNum /* 승인번호 */
						        , A.merc_name AS partnerName /* 거래처 명칭 */
						        , A.merc_saup_no AS partnerNo /* 거래처 등록번호 */
						        , IFNULL(B.card_name, '[미등록카드]') AS cardName /* 카드 명칭 */
						        , A.card_num AS cardNum /* 카드 번호 */
						        , A.request_amount AS reqAmt /* 금액 */
						        , A.amt_md_amount AS stdAmt /* 공급가액 */
						        , A.vat_md_amount AS vatAmt /* 부가세 */
						        , A.ser_amount AS serAmt /* 서비스 금액 */
						        , res.doc_no	AS docNo
						        , IFNULL(ea.c_dititle, eap.doc_title) AS docTitle
						        , IFNULL(ea.c_tikeycode, eap.form_id) AS formId
						        , res.doc_status	AS docStatus
						        , res.emp_name		AS docEmpName
						        , res.doc_seq		AS docSeq						        
						        , CASE
						                WHEN IFNULL(MAX(A.send_yn), 'N') = 'N' THEN  '미결의'
						                WHEN IFNULL(MAX(A.send_yn), 'N') = 'Y' THEN CONCAT('결의 (', IFNULL(( SELECT emp_name FROM NEOS.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = A.edited_by ), ''), ')')
						                ELSE '상태값 판단 불가'
						        END AS approvalStatName /* 결의상태 명칭 */
						        , A.send_yn AS approvalStat /* 결의상태 코드 */
						        , IFNULL(B.public_yn, 'N') AS publicYn /* 카드 공개범위 포함 여부 */
			        ]]>

		<if test='notUseSyncIds == null or "".equals(notUseSyncIds)'>
			<![CDATA[
					        	/* ## SELECT - 02 - isEmpty - notUseSyncIds ## */
					        	, 'Y' AS notUseYn /* 미사용 여부 */
					        ]]>
		</if>
		<if test='notUseSyncIds != null and !"".equals(notUseSyncIds)'>
			<![CDATA[
					        	/* ## SELECT - 02 - isNotEmpty - notUseSyncIds ## */			        
						        , CASE
						                WHEN sync_id IN ( ${notUseSyncIds} ) THEN 'N'
						                ELSE 'Y'
						        END notUseYn /* 미사용 여부 */			        
					        ]]>
		</if>
					        
					<![CDATA[
						/* ## FROM - 02 ## */
						FROM    NEOS.t_ex_card_aq_tmp A
		                        INNER JOIN (
		                                SELECT  A.card_code
		                                        , A.card_num
		                                        , A.card_num_con
		                                        , A.card_name
		                                        , 'Y' AS public_yn
		                                FROM    (
		                                                SELECT  comp_seq
		                                                        , card_code
		                                                        , card_num
		                                                        , REPLACE(card_num, '-', '') AS card_num_con
		                                                        , card_name
		                                                FROM    NEOS.t_ex_card
		                                                WHERE   comp_seq = #{compSeq}
		                                        ) A
                                        GROUP   BY A.card_code, A.card_num, A.card_num_con, A.card_name
		                        ) B ON A.card_num = B.card_num_con
						LEFT JOIN	NEOS.t_exnp_resdoc	res
						ON	A.if_m_id = res_doc_seq
						LEFT JOIN	(
							SELECT	c_dikeycode 
								, c_dititle
								, c_tikeycode
							FROM	NEOS.a_docinfo
							GROUP BY c_dikeycode
						)	ea
						ON	res.doc_seq = ea.c_dikeycode
						LEFT JOIN	(
							SELECT	doc_id
								, doc_title
								, form_id
							FROM	NEOS.teag_appdoc
						)	eap
						ON	res.doc_seq = eap.doc_id		                        
					]]>
					
					<![CDATA[
						/* ## WHERE - 02 ## */
						        /* 검색조건 : 승인일자 ( from ~ to ) */
						WHERE   A.auth_date BETWEEN IFNULL(#{cardAuthDateFrom}, '') AND IFNULL(#{cardAuthDateTo}, '')
						        /* 검색조건 : 사용처 */
						AND     A.merc_name LIKE CONCAT('%', IFNULL(#{searchPartnerName}, ''), '%')
						        /* 검색조건 : 구분 ( 전체 : "" / 승인 : "Y" / 취소 : "N" ) */
						AND     (
						                ( IFNULL(#{searchGeoraeStat}, '') = '' AND IFNULL(A.georae_stat, '') = IFNULL(A.georae_stat, '') )
						                OR ( IFNULL(#{searchGeoraeStat}, '') = 'Y' AND IFNULL(A.georae_stat, '') IN ( 'Y', '1' ) )
						                OR ( IFNULL(#{searchGeoraeStat}, '') = 'N' AND IFNULL(A.georae_stat, '') IN ( 'N', '0' ) )
						        )
						        /* 검색조건 : 승인번호 */
						AND     A.auth_num LIKE CONCAT('%', IFNULL(#{searchAuthNum}, ''), '%')
						        /* 검색조건 : 사업자번호 */
						AND     IFNULL(A.merc_saup_no, '') LIKE CONCAT('%', REPLACE(IFNULL(#{searchPartnerNo}, ''), '-', ''), '%')
						        /* 검색조건 : 결의자 */
						AND     IFNULL(res.emp_name, '') LIKE CONCAT('%', #{searchApprovalEmpName}, '%')
						GROUP BY georae_coll
					]]>
		
		<![CDATA[
			/* ## FROM - 01 ## */
					) CARDLIST
		]]>
		
		<![CDATA[
			/* ## WHERE - 01 ## */
	        WHERE   (
	                        ( IFNULL(#{searchCardInfo}, '') = '' AND CARDLIST.cardNum = CARDLIST.cardNum )
	                        OR ( IFNULL(#{searchCardInfo}, '') != '' and IFNULL(#{searchCardInfo}, '') like concat('%|', CARDLIST.card_code, '|%') )
	                )
	                /* 검색조건 : 결의상태 ( 전체 : "" / 결의 : "Y" / 미결의 : "N" ) */
			AND     (
						( IFNULL(#{searchSendYn}, '') = '' AND IFNULL(send_yn, 'N') = IFNULL(send_yn, 'N') )
						OR ( IFNULL(#{searchSendYn}, '') = 'Y' AND IFNULL(send_yn, 'N') = 'Y' )
						OR ( IFNULL(#{searchSendYn}, '') = 'N' AND IFNULL(send_yn, 'N') = 'N' AND IFNULL(notUseYn, 'Y') = 'Y')
						OR ( IFNULL(#{searchSendYn}, '') = 'UN' AND IFNULL(notUseYn, 'Y') = 'N' )
					)
			ORDER   BY authDate DESC, authTime DESC, cardNum
		]]>
	</select>

	<select id="NpAdminCard.GetTransItem" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.GetTransItem */]]>
		<![CDATA[/* 카드 이관 항목 조회 */]]>
		
		<![CDATA[
			/* ## SELECT ## */
			SELECT  seq AS seq
			        , comp_seq AS compSeq
			        , sync_id AS syncId
			        , card_num AS cardNum
			        , auth_num AS authNum
			        , auth_date AS authDate
			        , auth_time AS authTime
			        , partner_no AS partnerNo
			        , partner_name AS partnerName
			        , amt AS reqAmt
			        , transfer_seq AS transSeq
			        , transfer_name AS transName
			        , receive_seq AS receiveSeq
			        , receive_name AS receiveName
			        , use_yn AS useYn
			        , supper_key AS supperKey
		]]>
		
		<![CDATA[
			/* ## FROM ## */
			FROM    NEOS.t_ex_card_transfer
		]]>
		
		<![CDATA[
			/* ## WHERE ## */
			WHERE   comp_seq = #{compSeq}
			AND     sync_id = #{syncId}
		]]>
		
		<![CDATA[
			/* ## OPTION ## */
			LIMIT	1
		]]>
	</select>

	<insert id="NpAdminCard.SetTransInsertItem" parameterType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.SetTransInsertItem */]]>
		<![CDATA[/* 카드 이관 항목 생성 */]]>
		
		<![CDATA[
			/* ## INSERT ## */
			INSERT INTO NEOS.t_ex_card_transfer ( comp_seq, sync_id, card_num, auth_num, auth_date, auth_time, partner_no, partner_name, amt, transfer_seq, transfer_name, receive_seq, receive_name, use_yn, supper_key, create_date )
		]]>
		
		<![CDATA[
			/* ## VALUES ## */
			VALUES ( #{compSeq}, #{syncId}, #{cardNum}, #{authNum}, #{authDate}, #{authTime}, #{partnerNo}, #{partnerName}, #{reqAmt}, #{empSeq}, #{empName}, #{receiveEmpSeq}, #{receiveEmpName}, 'Y', #{receiveEmpSuperKey}, NOW() )
		]]>

		<selectKey keyProperty="transSeq" resultType="int">
			<![CDATA[
				/* ## SELECT ## */
				SELECT LAST_INSERT_ID();
			]]>
		</selectKey>
	</insert>

	<update id="NpAdminCard.SetTransUpdateItem" parameterType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.SetTransUpdateItem */]]>
		<![CDATA[/* 카드 이관 항목 수정 */]]>
		
		<![CDATA[
			/* ## UPDATE ## */
			UPDATE  NEOS.t_ex_card_transfer
		]]>
		
		<![CDATA[
			/* ## SET ## */
			SET     transfer_seq = #{empSeq}
			        , transfer_name = #{empName}
			        , receive_seq = #{receiveEmpSeq}
			        , receive_name = #{receiveEmpName}
			        , supper_key = #{receiveEmpSuperKey}
			        , create_date = NOW()
		]]>
		
		<![CDATA[
			/* ## WHERE ## */
			WHERE   comp_seq = #{compSeq}
			AND     sync_id = #{syncId}
		]]>
	</update>

	<update id="NpAdminCard.SetUseYNUpdateItem" parameterType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.SetUseYNUpdateItem */]]>
		<![CDATA[/* 카드 사용여부 수정 */]]>

		<![CDATA[
			/* ## UPDATE ## */
			UPDATE  NEOS.t_ex_card_transfer
		]]>
		
		<![CDATA[
			/* ## SET ## */
			SET     use_yn = #{useYN}
					, use_yn_emp_seq = #{empSeq}
			        , create_date = NOW()
		]]>
		
		<![CDATA[
			/* ## WHERE ## */
			WHERE   comp_seq = #{compSeq}
			AND     sync_id = #{syncId}
		]]>
	</update>

	<insert id="NpAdminCard.SetUseYNInsertItem" parameterType="java.util.HashMap">
		<![CDATA[/* mariadb : /egovframework/sqlmap/mariadb/BizboxAlpha/expend/np/admin/NpAdminCardSQL.xml - NpAdminCard.SetUseYNInsertItem */]]>
		<![CDATA[/* 카드 이관 항목 생성 */]]>
		
		<![CDATA[
			/* ## INSERT ## */
			INSERT INTO NEOS.t_ex_card_transfer ( comp_seq, sync_id, card_num, auth_num, auth_date, auth_time, partner_no, partner_name, amt, use_yn, use_yn_emp_seq, create_date )
		]]>
		
		<![CDATA[
			/* ## VALUES ## */
			VALUES ( #{compSeq}, #{syncId}, #{cardNum}, #{authNum}, #{authDate}, #{authTime}, #{partnerNo}, #{partnerName}, #{reqAmt}, #{useYN}, #{empSeq}, NOW() )
		]]>

		<selectKey keyProperty="transSeq" resultType="int">
			<![CDATA[
				/* ## SELECT ## */
				SELECT LAST_INSERT_ID();
			]]>
		</selectKey>
	</insert>
</mapper>