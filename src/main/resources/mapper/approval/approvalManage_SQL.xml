<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="approvalManage">

    <select id="getTest" parameterType="map" resultType="map">
        select 1010 AS MANAGE_DEPT_SEQ
    </select>

    <!-- 기록물철 관리 리스트 NEOS.A_archiveinfo(기록물철 정보) -->
    <select id="getArchiveInfoList" parameterType="map" resultType="map">
        /* getArchiveInfoList */

        SELECT
            C_AIKEYCODE AS C_AIKEYCODE,
            NEOS.FN_GetMultiLang (#{loginVO.langCode}, COMP_NAME_MULTI) AS COMP_NAME,
            NEOS.FN_GetMultiLang (#{loginVO.langCode}, DEPT_NAME_MULTI) AS DEPT_NAME,
            C_WICODE AS C_WICODE,
            C_WIGUBUN AS C_WIGUBUN,
            C_WINAME AS C_WINAME,
            IFNULL(c_aititle, '제목없음') AS C_AITITLE,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM135', c_aitype ,#{loginVO.langCode}) AS C_AITYPENAME,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM104', c_aipreserve ,#{loginVO.langCode}) AS WCAFTERPRESERVE,
            C_AICOMPSEQ AS C_AICOMPSEQ,
            C_AIOWNORGCODE AS C_AIOWNORGCODE,
            C_AIOWNUSERKEY AS C_AIOWNUSERKEY,
            NEOS.FN_GetMultiLang (#{loginVO.langCode}, EMP_NAME_MULTI) AS USERNAME,
            DATE_FORMAT(c_airegdate, '%Y-%m-%d') AS C_AIREGDATE,
            DATE_FORMAT(C_AILASTDATE, '%Y-%m-%d') AS C_AILASTDATE,
            c_aiokflag AS C_AIOKFLAG,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM078', IFNULL(C_AIOKFLAG, '0'), #{loginVO.langCode}) AS C_AIOKFLAG_TXT,
            c_aideleteopt AS C_AIDELETEOPT,
            c_aiownflag AS C_AIOWNFLAG,
            c_aiStopYear AS C_AISTOPYEAR,
            C_AIMADEYEAR AS C_AIMADEYEAR,
            c_airecordcount AS C_AIRECORDCOUNT,
            (
                CASE c_aiStopYear WHEN DATE_FORMAT(NOW(),'%Y') THEN '0'
                                  ELSE '1'
                END
            ) AS YEARFLAG,
            c_wikey AS C_WIKEY,
            c_aipreserve AS C_AIPRESERVE,
            c_aitype AS C_AITYPE,
            LANK
        FROM
        (
            SELECT
                W.*,
                W.ord LANK
            FROM
                (
                    SELECT
                        AI.*,
                        C_WINAME,
                        C_WICODE,
                        C_WIGUBUN,
                        EMP_NAME_MULTI,
                        DEPT_NAME_MULTI,
                        COMP_NAME_MULTI
                    FROM
                        NEOS.A_ARCHIVEINFO AI
                    INNER JOIN
                        NEOS.A_WORKCODEINFO WI
                    ON AI.c_wikey = WI.c_wikey
                    LEFT OUTER JOIN
                        NEOS.V_T_CO_EMP_MULTI E
                    ON  AI.C_AIOWNUSERKEY = E.EMP_SEQ
                    LEFT OUTER JOIN
                        NEOS.V_T_CO_DEPT_MULTI D
                    ON AI.C_AIOWNORGCODE = D.DEPT_SEQ
                    LEFT OUTER JOIN
                        NEOS.V_T_CO_COMP_MULTI C
                    ON AI.C_AICOMPSEQ = C.COMP_SEQ
                    WHERE 1 = 1
<!--                    <if test='SearchType == "USER"'>-->
<!--                        <if test="deptSeq != null and deptSeq != ''">-->
<!--                            AND C_AIOWNORGCODE = #{deptSeq}-->
<!--                        </if>-->
<!--                        <if test="deptSeq == null or deptSeq == ''">-->
<!--                            AND  AI.C_AIOWNORGCODE    IN (#{manageDeptSeq}, #{loginVO.orgnztId})-->
<!--                        </if>-->
<!--                    </if>-->
<!--                    <if test="SearchType != 'USER'">-->
<!--                        <if test="compSeq != null and compSeq != ''">-->
<!--                            AND C_AICOMPSEQ = #{compSeq}-->
<!--                        </if>-->
<!--                        <if test="deptSeq != null and deptSeq != ''">-->
<!--                            AND C_AIOWNORGCODE = #{deptSeq}-->
<!--                        </if>-->
<!--                    </if>-->
                    AND
                        IFNULL(AI.C_AIDELETEOPT, '') IN ('', 'd')
                    <if test='aiKeyCodeArr != null and !"".equals(aiKeyCodeArr)'>
                    AND C_AIKEYCODE IN
                        <foreach collection="aiKeyCodeArr" item="item" separator="," close=")" open="(">
                            #{item}
                        </foreach>
                    </if>
<!--                    <if test="keyword != null and keyword != ''">-->
<!--                        AND    AI.c_aititle like '%${keyword}%'-->
<!--                    </if>-->
<!--                    <if test="c_wikey != null and c_wikey != ''">-->
<!--                        AND    AI.c_wikey                = #{c_wikey}-->
<!--                    </if>-->
<!--                    <if test="c_aiokflag != null and c_aiokflag != ''">-->
<!--                        AND     IFNULL(C_AIOKFLAG, '0')  = #{c_aiokflag}-->
<!--                    </if>-->
<!--                    <if test="aiDeleteOpt != null and aiDeleteOpt != ''">-->
<!--                        <if test="aiDeleteOpt == 1">-->
<!--                            AND     (c_aideleteopt    =   '' OR c_aideleteopt IS NULL)-->
<!--                        </if>-->
<!--                        <if test="aiDeleteOpt == 2">-->
<!--                            AND     c_aideleteopt     =   'd'-->
<!--                        </if>-->
<!--                    </if>-->
<!--                    <if test="userName != null and userName != ''">-->
<!--                        AND     EMP_NAME_MULTI  LIKE '%${userName}%'-->
<!--                    </if>-->
<!--                    <if test="aiMadeYear != null and aiMadeYear != ''">-->
<!--                        AND     c_aimadeyear      = #{aiMadeYear}-->
<!--                    </if>-->
<!--                    <if test="aiStopYear != null and aiStopYear != ''">-->
<!--                        AND     c_aistopyear      = #{aiStopYear}-->
<!--                    </if>-->
<!--                    <if test="workName != null and workName != ''">-->
<!--                        AND     C_WINAME      LIKE '%${workName}%'-->
<!--                    </if>-->
                ) W
        ORDER BY
            IFNULL(C_AIDELETEOPT, '') ASC,
            C_AISTOPYEAR DESC,
            CAST(LANK AS SIGNED),
            C_AIKEYCODE desc
        ) Y
    </select>

    <!-- 기록물철 시퀀스 조회 (db function) -->
    <select id="getMaxAiKeycode" resultType="String">
        /* getMaxAiKeycode */
        SELECT NEOS.NEXTVAL('seq_archive') C_AIKEYCODE FROM DUAL
    </select>

    <!-- 기록물철 저장하기 위해 deptSeq와 A_DOCDEPTMANAGE 테이블 row 중 동일한 DEPT_SEQ 조회 -->
    <select id="getEaManageDeptSeq" parameterType="map" resultType="map">
        /* getEaManageDeptSeq */
        SELECT
            CASE WHEN IFNULL(SEL_SEQ, '') = '' THEN A.DEPT_SEQ
                 ELSE SEL_SEQ END AS MANAGE_DEPT_SEQ
        FROM
            (SELECT #{deptSeq} AS DEPT_SEQ) A
        LEFT OUTER JOIN
            NEOS.A_DOCDEPTMANAGE B
        ON A.DEPT_SEQ = B.DEPT_SEQ
        WHERE
            1 = 1
        LIMIT 1
    </select>

    <!-- 기록물철 저장 NEOS.A_archiveinfo(기록물철 정보) -->
    <insert id="setArchiveInfo" parameterType="map">
        /* setArchiveInfo */
	    INSERT INTO NEOS.A_ARCHIVEINFO
            (
                C_AIKeyCode,
                C_WIKey,
                C_AIUserKey,
                C_AIOrgCode,
                C_AIMadeYear,
                C_AISeqNum,
                C_AIOldOrgName,
                C_AIStopYear,
                C_AIProvideDay,
                C_AIProvideMemo,
                C_AIOldSeqNum,
                C_AIOldFlag,
                C_AIEditFlag,
                C_AIRecordCount,
                C_AIRecordPageCount,
                C_AIElectronicCount,
                C_AIChargeFlag,
                C_AITransferFlag,
                C_AIOkFlag,
                C_AIRegDate,
                C_AILastDate,
                C_AILASTMILESEC,
                C_AITITLE,
                C_AITYPE,
                C_AINOWUSERKEY,
                C_AIAFTERORGCODE,
                C_AIAFTERTOSEQNUM,
                C_AIAFTERCISEQNUM,
                C_AIDELETEOPT,
                C_AIHopeTransYear,
                C_AIMemo,
                C_AIPreserve,
                C_AIOwnOrgCode,
                C_AIOwnUserkey,
                C_AIOwnFlag,
                C_AiFullPath,
                <if test="lank != null and lank != ''">
                ORD,
                </if>
                CREATE_SEQ,
                CREATE_DATE,
                MODIFY_SEQ,
                MODIFY_DATE,
                C_AIGROUPSEQ,
                C_AICOMPSEQ,
                C_AIOWNCOMPSEQ
            )
	    VALUES
            (
                #{aiKeyCode},
                #{wiKey},
                #{aiOwnEmpSeq},
                #{manageDeptSeq},
                #{aiMadeYear},
                IFNULL((SELECT RIGHT(MAX(C_AiSEQNUM) + 1000001, 6) FROM NEOS.A_ARCHIVEINFO AG WHERE C_AIMADEYEAR = #{aiMadeYear} and C_AIORGCODE = #{manageDeptSeq}), '000001'),
                '',
                #{aiMadeYear},
                '',
                '',
                '',
                '1',
                '0',
                '0',
                '0',
                '0',
                '0',
                '001',
                '1',
                DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'),
                DATE_FORMAT(NOW(), '%Y%m%d'),
                DATE_FORMAT(NOW(), '%H%i%s'),
                #{aiTitle},
                #{aiType},
                #{aiOwnEmpSeq},
                #{manageDeptSeq},
                '0000000001',
                '0000000001',
                '',
                DATE_FORMAT(NOW(), '%Y'),
                #{memo},
                #{aiPreservePeriod},
                #{manageDeptSeq},
                #{aiOwnEmpSeq},
                '0',
                #{aiKeyCode},
                <if test="lank != null and lank != ''">
                #{lank},
                </if>
                #{loginVO.uniqId},
                NOW(),
                #{loginVO.uniqId},
                NOW(),
                #{aiOwnGroupSeq},
                #{aiOwnCompSeq},
                #{aiOwnCompSeq}
            )
    </insert>

    <!-- 기록물철 저장 히스토리 NEOS.A_ARCHIVEHISTORY(기록물철 신규 저장이력) -->
    <insert id="setArchiveInsertHistory" parameterType="map">
        /* setArchiveInsertHistory */
        INSERT INTO NEOS.A_ARCHIVEHISTORY
            (
                C_AIKEYCODE,
                C_AHDATE,
                C_AHMILESEC,
                C_AHPREORGCODE,
                C_AHAFTERORGCODE,
                C_AHPREUSERKEY,
                C_AHAFTERUSERKEY,
                C_AHPRETITLE,
                C_AHAFTERTITLE,
                C_AHPRETYPE,
                C_AHAFTERTYPE,
                C_AHMEMO,
                C_AHAFTERTOSEQNUM,
                C_AHAFTERCISEQNUM,
                C_AHAFTERPRESERVE,
                CREATE_SEQ,
                CREATE_DATE
            )
        VALUES
            (
                #{aiKeyCode},
                DATE_FORMAT(NOW(), '%Y%m%d'),
                DATE_FORMAT(NOW(), '%H%i%s'),
                '',
                #{manageDeptSeq},
                '',
                #{aiOwnEmpSeq},
                '',
                #{aiTitle},
                '',
                #{aiType},
                '신규등록',
                '0000000001',
                '0000000001',
                #{aiPreservePeriod},
                #{loginVO.uniqId},
                NOW()
            )
    </insert>

    <!-- 기록물철 복사 저장 NEOS.A_archiveinfo(기록물철 정보) -->
    <insert id="setArchiveInfoCopy" parameterType="map">
        /* setArchiveInfoCopy */
        INSERT INTO NEOS.A_ARCHIVEINFO
        (
            C_AIKEYCODE,
            C_WIKEY,
            C_AIUSERKEY,
            C_AIORGCODE,
            C_AIMADEYEAR,
            C_AISEQNUM,
            C_AIOLDORGNAME,
            C_AISTOPYEAR,
            C_AIPROVIDEDAY,
            C_AIPROVIDEMEMO,
            C_AIOLDSEQNUM,
            C_AIOLDFLAG,
            C_AIEDITFLAG,
            C_AIRECORDCOUNT,
            C_AIRECORDPAGECOUNT,
            C_AIELECTRONICCOUNT,
            C_AICHARGEFLAG,
            C_AITRANSFERFLAG,
            C_AIOKFLAG,
            C_AIREGDATE,
            C_AILASTDATE,
            C_AILASTMILESEC,
            C_AITITLE,
            C_AITYPE,
            C_AINOWUSERKEY,
            C_AIAFTERORGCODE,
            C_AIAFTERTOSEQNUM,
            C_AIAFTERCISEQNUM,
            C_AIDELETEOPT,
            C_AIHOPETRANSYEAR,
            C_AIMEMO,
            C_AIPRESERVE,
            C_AIOWNORGCODE,
            C_AIOWNUSERKEY,
            C_AIOWNFLAG,
            C_AIFULLPATH,
            ORD,
            CREATE_SEQ,
            CREATE_DATE,
            MODIFY_SEQ,
            MODIFY_DATE,
            C_AIGROUPSEQ,
            C_AICOMPSEQ,
            C_AIOWNCOMPSEQ
        )
        SELECT
            #{aiKeyCodeNew},
            #{wiKey},
            #{aiOwnEmpSeq},
            #{manageDeptSeq},
            #{aiMadeYear},
            IFNULL((SELECT RIGHT(MAX(C_AiSEQNUM) + 1000001, 6) FROM NEOS.A_ARCHIVEINFO AG WHERE C_AIMADEYEAR = #{aiMadeYear} and C_AIORGCODE = #{manageDeptSeq}), '000001'),
            '',
            #{aiMadeYear},
            '',
            '',
            '',
            '1',
            '0',
            '0',
            '0',
            '0',
            '0',
            '001',
            '1',
            DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'),
            DATE_FORMAT(NOW(), '%Y%m%d'),
            DATE_FORMAT(NOW(), '%H%i%s'),
            C_AITITLE,
            C_AITYPE,
            #{aiOwnEmpSeq},
            #{manageDeptSeq},
            '0000000001',
            '0000000001',
            '',
            DATE_FORMAT(NOW(), '%Y'),
            C_AIMEMO,
            C_AIPRESERVE,
            #{manageDeptSeq},
            #{aiOwnEmpSeq},
            '0',
            #{aiKeyCodeNew},
            ORD,
            #{loginVO.uniqId},
            NOW(),
            #{loginVO.uniqId},
            NOW(),
            #{aiOwnGroupSeq},
            #{aiOwnCompSeq},
            #{aiOwnCompSeq}
        FROM
            NEOS.A_ARCHIVEINFO
        WHERE
            C_AIKEYCODE =  #{aiKeyCodeOld}
    </insert>

    <!-- 기록물철 복사 저장 히스토리 NEOS.A_ARCHIVEHISTORY(기록물철 정보) -->
    <insert id="setArchiveCopyHistory" parameterType="map">
        /* setArchiveCopyHistory */
        INSERT INTO NEOS.A_ARCHIVEHISTORY
            (
                C_AIKEYCODE,
                C_AHDATE,
                C_AHMILESEC,
                C_AHPREORGCODE,
                C_AHAFTERORGCODE,
                C_AHPREUSERKEY,
                C_AHAFTERUSERKEY,
                C_AHPRETITLE,
                C_AHAFTERTITLE,
                C_AHPRETYPE,
                C_AHAFTERTYPE,
                C_AHMEMO,
                C_AHAFTERTOSEQNUM,
                C_AHAFTERCISEQNUM,
                C_AHAFTERPRESERVE,
                CREATE_SEQ,
                CREATE_DATE
            )
        SELECT
            #{aiKeyCodeNew},
            DATE_FORMAT(NOW(), '%Y%m%d'),
            DATE_FORMAT(NOW(), '%H%i%s'),
            '',
            #{manageDeptSeq},
            '',
            #{aiOwnEmpSeq},
            '',
            C_AITITLE,
            '',
            C_AITYPE,
            '신규등록',
            '0000000001',
            '0000000001',
            C_AIPRESERVE,
            #{loginVO.uniqId},
            NOW()
        FROM
            NEOS.A_ARCHIVEINFO
        WHERE
            C_AIKEYCODE =  #{aiKeyCodeOld}
    </insert>

    <!-- 종료년도연장 NEOS.A_archiveinfo(기록물철 정보) 현재년보다 종료년도가 작은지 체크 -->
    <select id="getArchiveStopYearChk" parameterType="map" resultType="map">
        /* getArchiveStopYearChk */
        SELECT
            C_AIKEYCODE
        FROM
            NEOS.A_ARCHIVEINFO
        WHERE
            C_AIKEYCODE IN
            <foreach collection="aiKeyCodeArr" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        AND
            (C_AIDELETEOPT IS NULL OR C_AIDELETEOPT = '')
        AND
            C_AISTOPYEAR &lt; DATE_FORMAT(NOW(), '%Y')
    </select>

    <!-- 종료년도 연장 NEOS.A_archiveinfo(기록물철 정보) 업데이트 -->
    <update id="setArchiveStopYearUpd" parameterType="map">
        /* setArchiveStopYearUpd */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_AILASTDATE    = DATE_FORMAT(NOW(), '%Y%m%d'),
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s'),
            MODIFY_SEQ      = #{loginVO.uniqId},
            MODIFY_DATE     = NOW(),
            C_AISTOPYEAR    = CONVERT(CONVERT(C_AISTOPYEAR, int) + 1, CHAR)
        WHERE
            C_AIKEYCODE IN
            <foreach collection="aiKeyCodeList" item="item" separator="," close=")" open="(">
                #{item.C_AIKEYCODE}
            </foreach>
        AND
            (C_AIDELETEOPT IS NULL OR C_AIDELETEOPT = '')
    </update>

    <!-- 종료년도 연장 NEOS.A_archiveGroup(기록물철권호수) 추가 -->
    <insert id="setArchiveGroup" parameterType="map">
        /* setArchiveGroup */
        INSERT INTO NEOS.A_ARCHIVEGROUP
            (
                C_AIKEYCODE,
                C_AGSEQNUM,
                C_AGTSEQNUM,
                C_AGDISPLAY,
                C_AGSTEP,
                C_AGRECORDCOUNT,
                C_AGRECORDPAGECOUNT,
                C_AGELECCOUNT,
                C_AGYEAR
            )
        SELECT
            AG.C_AIKEYCODE,
            RIGHT(MAX(C_AGSEQNUM) + 1001, 3) AS C_AGSEQNUM,
            C_AGTSEQNUM AS C_AGTSEQNUM,
            1,
            2,
            0,
            0,
            0,
            CONVERT(CONVERT(MAX(C_AGYEAR), int) + 1, CHAR) AS C_AGYEAR
        FROM
            NEOS.A_ARCHIVEGROUP AG
        WHERE
            AG.C_AIKEYCODE IN
            <foreach collection="aiKeyCodeList" item="item" separator="," close=")" open="(">
                #{item.C_AIKEYCODE}
            </foreach>
        GROUP BY AG.C_AIKEYCODE
    </insert>

    <!--
        종료년도 복구 - NEOS.A_RECORDINFO 현 종료년도 문서 존재 체크
        삭제 가능 여부 체크 - 삭제 가능 여부 체크
    -->
    <select id="getDocForArchiveCnt" parameterType="map" resultType="Integer">
        /* getDocForArchiveCnt */
        SELECT
            COUNT(*)
        FROM
            NEOS.A_RECORDINFO RI
        LEFT OUTER JOIN
            NEOS.A_DRAFTINFO DI
        ON DI.C_DIKEYCODE = RI.C_DIKEYCODE AND DI.C_DISEQNUM = '0000000001'
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
        AND
            RI.C_RIDELETEOPT IS NULL
        AND
            (RI.C_RIDOCNUM &gt; ' ' or (DI.C_DIKEYCODE IS NOT NULL AND DI.C_DISTATUS NOT IN ('d', '005', '007')))
        AND
            (RI.C_RIDOCNUM &gt; ' ' or (DI.C_DIKEYCODE IS NOT NULL AND DI.C_DISTATUS IN ('002', '003', '004')))
        <if test="aiStopYear != null and aiStopYear != ''">
            AND SUBSTR(RI.C_RIREGDATE , 1, 4) >= #{aiStopYear}
        </if>
    </select>

    <!-- 종료년도 복구 NEOS.A_archiveinfo 업데이트 -->
    <select id="setArchiveStopYearRollBack" parameterType="map">
        /* setArchiveStopYearRollBack */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_AILASTDATE    = DATE_FORMAT(NOW(), '%Y%m%d'),
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s'),
            modify_seq      = #{loginVO.uniqId},
            modify_date     = NOW(),
            C_AISTOPYEAR    = CONVERT(CONVERT(C_AISTOPYEAR, int) - 1, CHAR)
        WHERE
            C_AIKEYCODE   = #{aiKeyCode}
        AND
            C_AISTOPYEAR  = #{aiStopYear}
    </select>

    <!-- 기록물철 편철 확정, 미확정 NEOS.A_ARCHIVEINFO(기록물철 편철 확정, 미확정) -->
    <update id="setArchiveOkFlag" parameterType="map">
        /* setArchiveOkFlag */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_AILASTDATE    = DATE_FORMAT(NOW(), '%Y%m%d')      ,
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s')      ,
            MODIFY_SEQ      = #{loginVO.uniqId}                 ,
            MODIFY_DATE     = NOW()                             ,
            <if test="okFlag == 0">
            C_AIOKFLAG = NULL
            </if>
            <if test="okFlag == 1">
            C_AIOKFLAG = #{okFlag}
            </if>
        WHERE
            C_AIKEYCODE IN
            <foreach collection="aiKeyCodeArr" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        <if test="okFlag == 0">
        AND IFNULL(C_AIOKFLAG, '0') = '1'
        </if>
        <if test="okFlag == 1">
        AND IFNULL(C_AIOKFLAG, '0') = '0'
        </if>
    </update>

    <!-- 기록물철 완전 삭제 NEOS.A_ARCHIVEINFO(기록물철 완전 삭제) -->
    <update id="setArchivePerfectionDel" parameterType="map">
        /* setArchivePerfectionDel */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_AIDELETEOPT   = 'A'                         ,
            C_AILASTDATE    = DATE_FORMAT(NOW(), '%Y%m%d'),
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s'),
            MODIFY_SEQ      = #{loginVO.uniqId}           ,
            MODIFY_DATE     = NOW()
        WHERE
            C_AIDELETEOPT = 'd'
        AND
            C_AIKEYCODE IN
            <foreach collection="aiKeyCodeArr" item="item" separator="," close=")" open="(">
            #{item}
            </foreach>
    </update>

    <!-- 기록물철 단일 조회 NEOS.A_archiveinfo(기록물철 정보) -->
    <select id="getArchiveInfo" parameterType="map" resultType="map">
        /* getArchiveInfo */
        SELECT
            C_AIKEYCODE AS C_AIKEYCODE,
            C_AITITLE AS C_AITITLE,
            AI.C_WIKEY AS C_WIKEY,
            (SELECT BFW.C_WINAME FROM NEOS.A_WORKCODEINFO BFW WHERE AI.C_WIKEY = BFW.C_WIKEY ) AS C_WINAME,
            C_AIOWNORGCODE AS C_AIOWNORGCODE,
            (SELECT REPLACE(DISPLAY_PATH_NAME_${loginVO.langCode}, '|' , '&gt;') FROM NEOS.T_CO_ORGCHART_NAME DM WHERE DM.SEQ = AI.C_AIOWNORGCODE) AS C_AIOWNORGNAME,
            C_AIOWNUSERKEY AS C_AIOWNUSERKEY,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', AI.C_AIOWNUSERKEY ) AS C_AIOWNUSERNAME,
            C_AIMADEYEAR AS C_AIMADEYEAR,
            C_AISTOPYEAR AS C_AISTOPYEAR,
            C_AIPRESERVE AS C_AIPRESERVE,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM104', C_AIPRESERVE, #{loginVO.langCode}) AS C_AIPRESERVENAME,
            C_AITYPE AS C_AITYPE,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM135', C_AITYPE, #{loginVO.langCode}) AS C_AITYPENAME,
            DATE_FORMAT(C_AIREGDATE, '%Y-%m-%d %H:%i:%s') AS C_AIREGDATE,
            DATE_FORMAT(CONCAT(C_AILASTDATE, C_AILASTMILESEC), '%Y-%m-%d %H:%i:%s') AS C_AILASTDATE,
            C_AIOKFLAG AS C_AIOKFLAG,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM078', IFNULL(C_AIOKFLAG, '0'), #{loginVO.langCode}) AS C_AIOKFLAGNAME,
            IFNULL(C_AIDELETEOPT, '') AS C_AIDELETEOPT,
            C_AIOWNFLAG AS C_AIOWNFLAG,
            AI.ORD AS ORDER_NUM,
            C_AIMEMO AS C_AIMEMO,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', IFNULL(AI.CREATE_SEQ, AI.C_AIUSERKEY)) AS CREATE_NM,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', IFNULL(AI.MODIFY_SEQ, AI.C_AIOWNUSERKEY)) AS MODIFY_NM,
            DATE_FORMAT(IFNULL(AI.CREATE_DATE, C_AIREGDATE), '%Y-%m-%d %H:%i:%s') AS CREATE_DT,
            DATE_FORMAT(IFNULL(AI.MODIFY_DATE, CONCAT (C_AILASTDATE, C_AILASTMILESEC)), '%Y-%m-%d %H:%i:%s') AS MODIFY_DT,
            C_AICHARGEFLAG,
            C_AIGROUPSEQ,
            C_AIOWNCOMPSEQ
        FROM
            NEOS.A_ARCHIVEINFO AI
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
    </select>

    <!-- 기록물철 상세정보 변경이력 NEOS.A_ARCHIVETRANSINFO(기록물철 변경이력)-->
    <select id="getArchiveTransList" parameterType="map" resultType="map">
        /* getArchiveTransList */
        SELECT
            AI.*,
            C_ATMEMO AS TRANS_MEMO,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM180', C_ATTYPE, #{loginVO.langCode}) AS TRANS_TYPE,
            DATE_FORMAT(CONCAT(C_ATDAY, C_ATTIME),'%Y-%m-%d %H:%i:%s') AS TRANS_DATE,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', AI.C_ATUSERKEY ) AS TRANS_EMP_NAME,
            (SELECT REPLACE(DISPLAY_PATH_NAME_${loginVO.langCode}, '|' , '&gt;') FROM NEOS.T_CO_ORGCHART_NAME DM WHERE DM.SEQ = AI.C_ATBEFOREORGCODE) AS BEFORE_DEPT_NAME,
            (SELECT REPLACE(DISPLAY_PATH_NAME_${loginVO.langCode}, '|' , '&gt;') FROM NEOS.T_CO_ORGCHART_NAME DM WHERE DM.SEQ = AI.C_ATAFTERORGCODE) AS AFTER_DEPT_NAME,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', AI.C_ATBEFOREUSERKEY ) AS BEFORE_EMP_NAME,
            NEOS.FN_GETMULTINAME(#{loginVO.langCode}, 'emp', AI.C_ATAFTERUSERKEY ) AS AFTER_EMP_NAME,
            (SELECT BFW.C_WINAME FROM NEOS.A_WORKCODEINFO BFW WHERE AI.C_ATBEFOREWORK = BFW.C_WIKEY) AS BEFORE_WORK_NAME,
            (SELECT AFW.C_WINAME FROM NEOS.A_WORKCODEINFO AFW WHERE AI.C_ATAFTERWORK = AFW.C_WIKEY) AS AFTER_WORK_NAME
        FROM
            NEOS.A_ARCHIVETRANSINFO AI
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
        ORDER BY C_ATSEQNUM DESC
    </select>

    <!-- 기록물철 업데이트 변경이력 NEOS.A_archivetransinfo(기록물철 변경이력) -->
    <insert id="setArchiveTransInfo" parameterType="map">
        /* setArchiveTransInfo */
        INSERT INTO NEOS.A_ARCHIVETRANSINFO
            (
                C_AIKEYCODE,
                C_ATSEQNUM,
                C_ATTYPE,
                C_ATDAY,
                C_ATTIME,
                C_ATORGCODE,
                C_ATUSERKEY,
                C_ATBEFORECOMPSEQ,
                C_ATAFTERCOMPSEQ,
                C_ATBEFOREORGCODE,
                C_ATAFTERORGCODE,
                C_ATBEFOREUSERKEY,
                C_ATAFTERUSERKEY,
                C_ATBEFOREWORK,
                C_ATAFTERWORK,
                C_ATMEMO
             )
        SELECT
            AI.C_AIKEYCODE,
            LPAD(CAST(IFNULL((SELECT MAX(C_ATSEQNUM) FROM NEOS.A_ARCHIVETRANSINFO TI WHERE TI.C_AIKEYCODE = AI.C_AIKEYCODE), 0) AS UNSIGNED) +1 , 10, '0'),
            #{type},
            DATE_FORMAT(NOW(), '%Y%m%d'),
            DATE_FORMAT(NOW(), '%H%i%s'),
            #{deptSeq},
            #{empSeq},
            C_AIOWNCOMPSEQ,
            #{giveCompSeq},
            C_AIOWNORGCODE,
            #{giveDeptSeq},
            C_AIOWNUSERKEY,
            #{giveEmpSeq},
            C_WIKEY,
            #{giveWiKey},
            #{memo}
        FROM
            NEOS.A_ARCHIVEINFO AI
        WHERE
            AI.C_AIKEYCODE = #{aiKeyCode}
        LIMIT 1
    </insert>

    <!-- 기록물철 업데이트 NEOS.A_archiveinfo(기록물철 정보) -->
    <update id="setArchiveInfoUpd" parameterType="map">
        /* setArchiveInfoUpd */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_WIKEY = #{wiKey},
            C_AITITLE = #{aiTitle},
            C_AIPRESERVE = #{aiPreservePeriod},
            C_AITYPE = #{aiType},
            C_AIOWNUSERKEY = #{aiOwnEmpSeq},
            C_AIMEMO = #{memo},
            C_AILASTDATE = DATE_FORMAT(NOW(), '%Y%m%d'),
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s'),
            <if test="lank != null and lank != ''">
            ORD = #{lank},
            </if>
            MODIFY_SEQ = #{loginVO.uniqId},
            MODIFY_DATE = NOW()
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
    </update>

    <!-- 기록물철 업데이트 히스토리 NEOS.A_ARCHIVETRANSINFO(기록물철 변경이력) -->
    <insert id="updateArchiveHistory" parameterType="map">
        /* updateArchiveHistory */
        INSERT INTO NEOS.A_ARCHIVEHISTORY
            (
                C_AIKEYCODE,
                C_AHDATE,
                C_AHMILESEC,
                C_AHPREORGCODE,
                C_AHAFTERORGCODE,
                C_AHPREUSERKEY,
                C_AHAFTERUSERKEY,
                C_AHPRETITLE,
                C_AHAFTERTITLE,
                C_AHPRETYPE,
                C_AHAFTERTYPE,
                C_AHMEMO,
                C_AHPRETOSEQNUM,
                C_AHAFTERTOSEQNUM,
                C_AHPRECISEQNUM,
                C_AHAFTERCISEQNUM,
                C_AHPREPRESERVE,
                C_AHAFTERPRESERVE,
                CREATE_SEQ,
                CREATE_DATE
            )
        SELECT
            C_AIKEYCODE,
            DATE_FORMAT(NOW(), '%Y%m%d') AS C_AHDATE,
            DATE_FORMAT(NOW(), '%H%i%s') AS C_AHMILESEC,
            C_AHAFTERORGCODE C_AHPREORGCODE,
            <if test="aiOwnOrgCode == null or aiOwnOrgCode == ''">
            C_AHAFTERORGCODE AS C_AHAFTERORGCODE,
            </if>
            <if test="aiOwnOrgCode != null and aiOwnOrgCode != ''">
            #{aiOwnOrgCode} AS C_AHAFTERORGCODE,
            </if>
            C_AHAFTERUSERKEY C_AHPREUSERKEY,
            <if test="aiOwnEmpSeq == null or aiOwnEmpSeq == ''">
            C_AHAFTERUSERKEY AS C_AHAFTERUSERKEY,
            </if>
            <if test="aiOwnEmpSeq != null and aiOwnEmpSeq != ''">
            #{aiOwnEmpSeq} AS C_AHAFTERUSERKEY,
            </if>
            C_AHAFTERTITLE AS C_AHPRETITLE,
            #{aiTitle} AS C_AHAFTERTITLE,
            C_AHAFTERTYPE AS C_AHPRETYPE,
            #{aiType} AS C_AHAFTERTYPE,
            #{memo} AS C_AHMEMO,
            C_AHAFTERTOSEQNUM AS C_AHPRETOSEQNUM,
            (SELECT MAX(C_TOSEQNUM) FROM NEOS.A_TAKEOVERINFO TI WHERE TI.C_AIKEYCODE = AH.C_AIKEYCODE) AS C_AHAFTERTOSEQNUM,
            C_AHAFTERCISEQNUM AS C_AHPRECISEQNUM,
            (SELECT MAX(C_CISEQNUM) FROM NEOS.A_CHARGEINFO CI WHERE CI.C_AIKEYCODE = AH.C_AIKEYCODE) AS C_AHAFTERCISEQNUM,
            C_AHAFTERPRESERVE AS C_AHPREPRESERVE,
            #{aiPreservePeriod} AS C_AHAFTERPRESERVE,
            #{loginVO.uniqId}  AS CREATE_SEQ,
            NOW() AS CREATE_DATE
        FROM
            NEOS.A_ARCHIVEHISTORY AH
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
        ORDER BY CONCAT(C_AHDATE, C_AHMILESEC) DESC
        LIMIT 1
    </insert>

    <!-- 기록물철 삭제 불가(미처리 기록물 문서) NEOS.A_RECORDINFO(미처리 기록물 문서) -->
    <select id="getArchiveInStandingDocList" parameterType="map" resultType="map">
        /* getArchiveInStandingDocList */
        SELECT 
            C_DITITLE,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM109', IF(IFNULL(C_DISTATUS, '008') = '009', '008', IFNULL(C_DISTATUS, '008')) , #{loginVO.langCode}) AS C_DISTATUS,
            CASE WHEN C_DRAFTERNAME IS NULL THEN NEOS.FN_GETMULTINAME(#{loginVO.langCode} , 'emp', RI.C_RIUSERKEY)
                 ELSE NEOS.FN_GETMULTILANG(#{loginVO.langCode}, C_DRAFTERNAME)
            END AS C_DIUSERNM,
            DATE_FORMAT(C_DIWRITEDAY, '%Y-%m-%d') AS C_RIREGDATE,
            C_DOCCOUNT
        FROM NEOS.A_RECORDINFO RI                 
        INNER JOIN 
            NEOS.A_DOCINFO DI 
        ON RI.C_DIKEYCODE  = DI.C_DIKEYCODE                 
        INNER JOIN 
            NEOS.A_LUMP_DOCINFO LDI 
        ON LDI.C_LIKEYCODE = DI.C_LIKEYCODE AND LDI.C_DIKEYCODE = DI.C_DIKEYCODE
        INNER JOIN 
            NEOS.A_DRAFTINFO DF     
        ON DF.C_DIKEYCODE = RI.C_DIKEYCODE AND DF.C_DISEQNUM = '0000000001'
        WHERE 
            C_AIKEYCODE = #{aiKeyCode}
        AND 
            DF.C_DISTATUS IN ('002', '003', '004')
        AND 
            RI.C_RIDELETEOPT IS NULL
        ORDER BY DF.C_DIUSERKEY, DF.C_DIWRITEDAY DESC
    </select>

    <!-- 기록물철 삭제 불가(미처리 기록물 문서) NEOS.A_RECORDINFO(미처리 기록물 문서) -->
    <select id="getArchiveInCompleteDocList" parameterType="map" resultType="map">
        /* getArchiveInCompleteDocList */
        SELECT
            C_DITITLE,
            NEOS.GET_CODE_DETAIL_INFO('0', 'COM109', IF(IFNULL(C_DISTATUS, '008') = '009', '008', IFNULL(C_DISTATUS, '008')) ,#{loginVO.langCode}) AS C_DISTATUS,
            CASE WHEN C_DRAFTERNAME IS NULL THEN NEOS.FN_GETMULTINAME(#{loginVO.langCode} , 'emp', RI.C_RIUSERKEY)
                 ELSE NEOS.FN_GETMULTILANG(#{loginVO.langCode}, C_DRAFTERNAME)
            END AS C_DIUSERNM,
            DATE_FORMAT(C_RIREGDATE, '%Y-%m-%d') AS C_RIREGDATE,
            C_RIDOCFULLNUM AS C_RIDOCNUMBER
        FROM
            NEOS.A_RECORDINFO RI
        INNER JOIN
            NEOS.A_DOCINFO DC ON DC.C_DIKEYCODE = RI.C_DIKEYCODE
        LEFT OUTER JOIN
            NEOS.A_DRAFTINFO DI
        ON DI.C_DIKEYCODE = RI.C_DIKEYCODE AND DI.C_DISEQNUM = '0000000001'
        WHERE
            C_AIKEYCODE = #{aiKeyCode}
        AND
            RI.C_RIDOCNUM &gt; ' '
        AND
            RI.C_RIDELETEOPT IS NULL
        ORDER BY CONVERT(C_RIDOCNUM , CHAR) DESC
    </select>

    <!-- 기록물철 삭제 NEOS.A_RECORDINFO(기록물철 삭제) -->
    <update id="setArchiveOptDorBlankUpd" parameterType="map">
        /* setArchiveOptDorBlankUpd */
        UPDATE
            NEOS.A_ARCHIVEINFO
        SET
            C_AIDELETEOPT   = (CASE WHEN #{aiDeleteOpt} = 'd' THEN '' ELSE 'd' END),
            C_AILASTDATE    = DATE_FORMAT(NOW(), '%Y%m%d'),
            C_AILASTMILESEC = DATE_FORMAT(NOW(), '%H%i%s'),
            MODIFY_SEQ      = #{loginVO.uniqId},
            MODIFY_DATE     = NOW()
        WHERE
            C_AIKEYCODE    = #{aiKeyCode}
    </update>

    <!-- 단위업무 리스트 NEOS.A_WORKCODEINFO-->
    <select id="getBusinessUnitCodeList" parameterType="map" resultType="map">
        /* getBusinessUnitCodeList - mariadb 단위업무관리 */
        SELECT
        W.C_WIKEY    AS C_WIKEY
        , W.C_WITKEY   AS C_WITKEY
        , W.C_WIORGCODE AS C_WIORGCODE
        , W.C_WITEMPCODE AS C_WITEMPCODE
        , W.C_WISKILLCODE AS C_WISKILLCODE
        , W.C_WISKILLNAME AS C_WISKILLNAME
        , W.C_WICODE  AS C_WICODE
        , W.C_WIDISPLAY AS C_WIDISPLAY
        , W.C_WISTEP AS C_WISTEP
        , W.C_WISTATUS AS C_WISTATUS
        , DATE_FORMAT(W.C_WIREGDATE, '%Y-%m-%d') C_WIREGDATE
        , DATE_FORMAT (W.C_WILASTDATE, '%Y-%m-%d') C_WILASTDATE
        , C_WICOMPSEQ AS C_WICOMPSEQ
        , CASE WHEN C_WIGUBUN = 'g' THEN NEOS.GET_code_detail_info('0', 'option0005', '1', #{loginVO.langCode}) ELSE NEOS.FN_GetMultiLang(#{loginVO.langCode}, comp_name_multi) END AS C_WICOMPNAME
        , W.C_WIAFTERORGCODE AS C_WIAFTERORGCODE
        , CASE WHEN C_WIGUBUN = 'd' THEN NEOS.FN_GetMultiLang(#{loginVO.langCode}, dept_name_multi) ELSE '-' END AS C_WIDEPTNAME
        , W.C_WIAFTERUSERKEY AS C_WIAFTERUSERKEY
        , W.C_WISTANDARDDAY AS C_WISTANDARDDAY
        , W.C_WINAME AS C_WINAME
        , W.C_WIAFTERNICNAME AS C_WIAFTERNICNAME
        , W.C_WIAFTERPRESERVE AS C_WIAFTERPRESERVE
        , NEOS.GET_CODE_DETAIL_Info('0', 'COM104', W.C_ASSPRESERVE ,#{loginVO.langCode}) AS PRESERVENAME
        , W.C_WIAFTERMETHOD AS C_WIAFTERMETHOD
        , NEOS.GET_CODE_DETAIL_Info('0', 'COM132', W.C_WIAFTERMETHOD ,#{loginVO.langCode}) AS METHODNAME
        , W.C_WIAFTERPLACE AS C_WIAFTERPLACE
        , NEOS.GET_CODE_DETAIL_Info('0', 'COM133', W.C_WIAFTERPLACE ,#{loginVO.langCode}) AS PLACENAME
        , W.C_WIAFTERPROVIDE AS C_WIAFTERPROVIDE
        , W.C_WIAFTEREXPLAIN AS C_WIAFTEREXPLAIN
        , W.C_REFPRESERVE AS C_REFPRESERVE
        , W.C_EFFPRESERVE AS C_EFFPRESERVE
        , W.C_DUTYPRESERVE AS C_DUTYPRESERVE
        , W.C_VALUEPRESERVE AS C_VALUEPRESERVE
        , W.C_ASSPRESERVE AS C_ASSPRESERVE
        , W.C_RESPPRESERVE AS C_RESPPRESERVE
        , W.C_WIAFTERTRANSFER AS C_WIAFTERTRANSFER
        , W.C_WIREADING AS C_WIREADING
        , W.C_WIMAINREADING AS C_WIMAINREADING
        , W.C_WIAFTERSPECIAL AS C_WIAFTERSPECIAL
        , W.C_WIAFTERSPECIAL1 AS C_WIAFTERSPECIAL1
        , W.C_WIAFTERSPECIAL2 AS C_WIAFTERSPECIAL2
        , W.C_WIAFTERSPECIAL3 C_WIAFTERSPECIAL3
        , C_WIGUBUN    AS C_WIGUBUN
        , C_WIGROUPSEQ AS C_WIGROUPSEQ
        , C_WICOMPSEQ  AS C_WICOMPSEQ
        , CASE WHEN C_WIGUBUN = 'g' THEN ''
                WHEN C_WIGUBUN = 'c' THEN NEOS.FN_GetMultiLang(#{loginVO.langCode}, comp_name_multi)
                WHEN C_WIGUBUN = 'd' THEN NEOS.FN_GetMultiLang(#{loginVO.langCode}, dept_name_multi) END AS C_WIORGNAME
        , C_WICHILDRENYN AS C_WICHILDRENYN
        , C_WIDAY AS C_WIDAY
        <if test ="excel_YN == &quot;Y&quot;">
            , CASE WHEN c_wigubun IN ('g' , 'c') THEN e_standard_code ELSE d_standard_code END AS C_STANDARDCODE
            , CASE WHEN c_wigubun IN ('g' , 'c') THEN w.comp_name ELSE w.dept_name END  AS C_STANDARDNAME
        </if>
        <if test ="excel_YN != &quot;Y&quot;">
            , '' AS C_STANDARDCODE
            , '' AS C_STANDARDNAME
        </if>

        FROM (
            SELECT * FROM
                (
                    SELECT
                    a.*
                    , CASE WHEN C_WIGUBUN = 'g' THEN 1 WHEN C_WIGUBUN = 'c' THEN 2 ELSE 3 END AS LANK
                    <if test ="excel_YN == &quot;Y&quot;">
                        , e.standard_code AS e_standard_code
                        , d.standard_code AS d_standard_code
                        , b.comp_name AS comp_name
                        , c.dept_name AS dept_name
                    </if>
                    FROM NEOS.A_WORKCODEINFO a
                    <if test ="excel_YN == &quot;Y&quot;">
                        LEFT OUTER JOIN NEOS.t_co_comp e ON e.comp_seq = a.c_wicompseq
                        LEFT OUTER JOIN NEOS.t_co_comp_multi b ON b.comp_seq =  e.comp_seq AND b.lang_code ='kr'
                        LEFT OUTER JOIN NEOS.a_transstandardcode d ON d.seq = a.c_wiorgcode AND d.gbn_org ='d'
                        LEFT OUTER JOIN NEOS.t_co_dept_multi c ON c.dept_seq = a.c_wiorgcode AND c.lang_code ='kr'
                    </if>
                    WHERE C_WISTATUS &lt;  '3'
                    <if test="SearchType == &quot;USER&quot;">
                        <if test="wiGubun == null or wiGubun == ''">
                            AND ( (C_WIGUBUN = 'g' AND C_WIGROUPSEQ = #{loginVO.groupSeq})
                            OR (C_WIGUBUN = 'c' AND C_WICOMPSEQ = #{loginVO.organId} )
                            OR (C_WIGUBUN = 'd'  AND C_WIAFTERORGCODE = #{loginVO.orgnztId})
                            OR (C_WIGUBUN = 'd'  AND C_WIAFTERORGCODE = #{deptSeq})
                            OR (C_WIGUBUN = 'd'  AND C_WICHILDRENYN = 'Y' AND C_WIAFTERORGCODE IN (${orgPathQuery})) )
                        </if>
                        <if test="wiGubun != null and  wiGubun != ''">
                            <if test="wiGubun == &quot;g&quot;">
                                AND C_WIGUBUN = 'g'
                                AND C_WIGROUPSEQ = #{loginVO.groupSeq}
                            </if>
                            <if test="wiGubun == &quot;c&quot;">
                                AND C_WIGUBUN = 'c'
                                AND C_WICOMPSEQ = #{loginVO.organId}
                            </if>
                            <if test="wiGubun == &quot;d&quot;">
                                AND C_WIGUBUN = 'd'
                                AND (C_WIAFTERORGCODE = #{loginVO.orgnztId} OR C_WIAFTERORGCODE = #{deptSeq} OR (C_WICHILDRENYN = 'Y' AND C_WIAFTERORGCODE IN (${orgPathQuery})))
                            </if>
                        </if>
                    </if>
                    <if test="SearchType != 'USER'">
                        <if test="compSeq == null or compSeq == ''">
                            <if test="loginVO.userSe != 'MASTER'">
                                AND C_WICOMPSEQ IN ('0', #{loginVO.organId})
                            </if>
                        </if>
                        <if test="compSeq != null and compSeq != ''">
                            AND C_WICOMPSEQ = #{compSeq}
                        </if>
                        <if test="deptSeq != null and deptSeq != ''">
                            AND C_WIAFTERORGCODE = #{deptSeq}
                        </if>
                    </if>
                    <if test="searchKeyward != null and searchKeyward != ''">
                        AND C_WINAME LIKE CONCAT('%', #{searchKeyward}, '%')
                    </if>
                ) W
            ORDER BY LANK, LPAD(IFNULL(C_WIDISPLAY, 99999999), 20 , 0), C_WINAME, C_WIREGDATE DESC
            ) W
        LEFT OUTER JOIN NEOS.V_T_CO_COMP_MULTI CM ON CM.COMP_SEQ = W.C_WICOMPSEQ
        LEFT OUTER JOIN NEOS.V_T_CO_DEPT_MULTI DM ON DM.DEPT_SEQ = W.C_WIAFTERORGCODE
    </select>

    <select id="getArchiveCnt" parameterType="map" resultType="Integer">
        /* WorkCodeManageDAO.GetArchiveCnt - mariaDB */
        SELECT
            COUNT(*)
        FROM NEOS.A_ARCHIVEINFO AI
        WHERE
            C_WIKEY = #{c_wikey}
        AND
            IFNULL(AI.C_AIDELETEOPT, '') = ''
    </select>

    <select id="getBusinessUnitCodeHistoryList" parameterType="map" resultType="map">
        /* getBusinessUnitCodeHistoryList */
        SELECT
            CONVERT(C_WCSEQNUM, INT ) AS  NUM,
            NEOS.FN_GETMULTILANG(#{loginVO.langCode}, emp_name_multi) AS USERNAME,
            DATE_FORMAT(C_WCDATE ,'%Y-%m-%d %H:%i:%s') AS C_WCDATE,
            C_WCSEQNUM                    AS C_WCSEQNUM,
            IFNULL(C_WCPRENAME, '')       AS C_WCPRENAME,       -- 변경전단위업무명칭
            IFNULL(C_WCAFTERNAME, '')     AS C_WCAFTERNAME,     -- 변경후단위업무명칭
            IFNULL(C_WCPRENICNAME, '')    AS C_WCPRENICNAME,    -- 변경전단위업무가명
            IFNULL(C_WCAFTERNICNAME, '')  AS C_WCAFTERNICNAME,  -- 변경후단위업무가명
            IFNULL(C_WCPREEXPLAIN, '')    AS C_WCPREEXPLAIN,    -- 변경전단위업무설명
            IFNULL(C_WCAFTEREXPLAIN, '')  AS C_WCAFTEREXPLAIN,  -- 변경후단위업무설명
            IFNULL(C_WCPREPRESERVE, '')   AS C_WCPREPRESERVE,   -- 변경전보존기간
            IFNULL(C_WCAFTERPRESERVE, '') AS C_WCAFTERPRESERVE, -- 변경후보존기간
            IFNULL(C_WCPREMETHOD, '')     AS C_WCPREMETHOD,     -- 변경전보전방법코드
            IFNULL(C_WCAFTERMETHOD, '')   AS C_WCAFTERMETHOD,   -- 변경후보존방법코드
            IFNULL(C_WCPREPLACE, '')      AS C_WCPREPLACE,      -- 변경전보존장소
            IFNULL(C_WCAFTERPLACE, '')    AS C_WCAFTERPLACE,    -- 변경후보존장소
            IFNULL(C_WCPREPROVIDE, '')    AS C_WCPREPROVIDE,    -- 변경전비치기록물여부
            IFNULL(C_WCAFTERPROVIDE, '')  AS C_WCAFTERPROVIDE,  -- 변경후비치기록물여부
            IFNULL(C_WCPRETRANSFER, '')   AS C_WCPRETRANSFER,   -- 변경전비치기록물이관시기
            IFNULL(C_WCAFTERTRANSFER, '') AS C_WCAFTERTRANSFER, -- 변경후비치기록물이관시기
            IFNULL(C_WCPRESPECIAL, '')    AS C_WCPRESPECIAL,    -- 변경전특수목록위치
            IFNULL(C_WCAFTERSPECIAL, '')  AS C_WCAFTERSPECIAL,  -- 변경후특수기록물위치
            IFNULL(C_WCPRESPECIAL1, '')   AS C_WCPRESPECIAL1,   -- 변경전제1특수목록
            IFNULL(C_WCAFTERSPECIAL1, '') AS C_WCAFTERSPECIAL1, -- 변경휴제1특수목록
            IFNULL(C_WCPRESPECIAL2, '')   AS C_WCPRESPECIAL2,   -- 변경전제2특수목록
            IFNULL(C_WCAFTERSPECIAL2, '') AS C_WCAFTERSPECIAL2, -- 변경휴제2특수목록
            IFNULL(C_WCPRESPECIAL3, '')   AS C_WCPRESPECIAL3,   -- 변경전제3특수목록
            IFNULL(C_WCAFTERSPECIAL3, '') AS C_WCAFTERSPECIAL3, -- 변경휴제3특수목록
            IFNULL(C_WCPREDISPLAY, '')    AS C_WCPREDISPLAY,    -- 변경전표시순서
            IFNULL(C_WCAFTERDISPLAY, '')  AS C_WCAFTERDISPLAY  -- 변경후표시순서
        FROM
            NEOS.A_WORKCODEHISTORY WH
        LEFT OUTER JOIN
            NEOS.V_T_CO_EMP_MULTI E ON WH.CREATE_SEQ = E.EMP_SEQ
        WHERE
            C_WIKEY = #{c_wikey}
        ORDER BY C_WCSEQNUM DESC
    </select>

    <select id="getWiKey" resultType="String">
        /* getWiKey */
        SELECT NEOS.NEXTVAL('seq_workcode') AS C_WIKEY FROM DUAL
    </select>

    <select id="getWiTempCode" resultType="String">
        /* WorkCodeManageDAO.getWiTempCode - mariaDB */
        SELECT
            CONCAT('e', IFNULL((SELECT LTRIM(RTRIM(LPAD(SUBSTR(MAX(C_WITEMPCODE), 2, 7) + 1, 7, 0))) FROM NEOS.A_WORKCODEINFO WHERE C_WITEMPCODE LIKE 'e%'), '0000001')) AS C_WITEMPCODE
        FROM DUAL
    </select>

    <insert id="setBusinessUnitCodeInfo" parameterType="map">
        /* setBusinessUnitCodeInfo */
        INSERT INTO NEOS.A_WORKCODEINFO
            (
                   C_WIKEY
            ,      C_WITKEY
            ,      C_WIDAY
            ,      C_WITIME
            ,      C_WIUSERKEY
            ,      C_WIORGCODE
            ,      C_WITEMPCODE
            ,      C_WISKILLCODE
            ,      C_WISKILLNAME
            ,      C_WICODE
            ,      C_REFPRESERVE
            ,      C_EFFPRESERVE
            ,      C_DUTYPRESERVE
            ,      C_VALUEPRESERVE
            ,      C_ASSPRESERVE
            ,      C_RESPPRESERVE
            ,      C_WIREADING
            ,      C_WIMAINREADING
            ,      C_WIDISPLAY
            ,      C_WISTEP
            ,      C_WISTATUS
            ,      C_WIREGDATE
            ,      C_WILASTDATE
            ,      C_WISTANDARDDAY
            ,      C_WINAME
            ,      C_WIAFTERORGCODE
            ,      C_WIAFTERUSERKEY
            ,      C_WIAFTERNICNAME
            ,      C_WIAFTEREXPLAIN
            ,      C_WIAFTERPRESERVE
            ,      C_WIAFTERMETHOD
            ,      C_WIAFTERPLACE
            ,      C_WIAFTERPROVIDE
            ,      C_WIAFTERTRANSFER
            ,      C_WIAFTERSPECIAL
            ,      C_WIAFTERSPECIAL1
            ,      C_WIAFTERSPECIAL2
            ,      C_WIAFTERSPECIAL3
            ,      C_WIDELETEOPT
            ,      C_WICOMFLAG
            ,      ORD
            ,      C_WIGUBUN
            ,      C_WIGROUPSEQ
            ,      C_WICOMPSEQ
            ,      C_WICHILDRENYN
            ,      CREATE_SEQ
            ,      CREATE_DATE
            ,      MODIFY_SEQ
            ,      MODIFY_DATE
            )
        VALUES
            (
                   #{c_wikey}
            ,      '*'
            ,      DATE_FORMAT(NOW(), '%Y%m%d')
            ,      DATE_FORMAT(NOW(), '%H%i%s')
            ,      #{loginVO.uniqId}
            ,      #{c_wiorgcode}
            ,      #{c_witempcode}
            ,      ''
            ,      ''
            ,      #{c_witempcode}
            ,      #{c_refpreserve}
            ,      #{c_effpreserve}
            ,      #{c_dutypreserve}
            ,      #{c_valuepreserve}
            ,      #{c_asspreserve}
            ,      #{c_resppreserve}
            ,      #{c_wireading}
            ,      #{c_wimainreading}
            ,      #{c_widisplay}
            ,      #{c_wistep}
            ,      '0'
            ,      DATE_FORMAT(NOW(), '%Y%m%d')
            ,      NOW()
            ,      NULL
            ,      #{c_winame}
            ,      #{c_wiorgcode}
            ,      #{loginVO.uniqId}
            ,      #{c_wiafternicname}
            ,      #{c_wiafterexplain}
            ,      #{c_asspreserve}
            ,      #{c_wiaftermethod}
            ,      #{c_wiafterplace}
            ,      #{c_wiafterprovide}
            ,      #{c_wiaftertransfer}
            ,      #{c_wiafterspecial}
            ,      #{c_wiafterspecial1}
            ,      #{c_wiafterspecial2}
            ,      #{c_wiafterspecial3}
            ,      ''
            ,      '1'
            ,      #{c_widisplay}
            ,      #{c_wigubun}
            ,      #{loginVO.groupSeq}
            ,      #{c_wicompseq}
            ,      #{c_wichildrenyn}
            ,      #{loginVO.uniqId}
            ,      NOW()
            ,      #{loginVO.uniqId}
            ,      NOW()
            )
    </insert>

    <insert id="setBusinessUnitCodeHistory" parameterType="map">
        /* setBusinessUnitCodeHistory */
        INSERT INTO NEOS.A_WORKCODEHISTORY
            (
                   C_WIKEY
            ,      C_WCSEQNUM
            ,      C_WCDATE
            ,      C_WCPREORGCODE
            ,      C_WCAFTERORGCODE
            ,      C_WCPREUSERKEY
            ,      C_WCAFTERUSERKEY
            ,      C_WCSTANDARDDAY
            ,      C_WCPRENAME
            ,      C_WCAFTERNAME
            ,      C_WCNAMEMEMO
            ,      C_WCPRENICNAME
            ,      C_WCAFTERNICNAME
            ,      C_WCNICNAMEMEMO
            ,      C_WCPREEXPLAIN
            ,      C_WCAFTEREXPLAIN
            ,      C_WCEXPLAINMEMO
            ,      C_WCPREPRESERVE
            ,      C_WCAFTERPRESERVE
            ,      C_WCPRESERVEMEMO
            ,      C_WCPREMETHOD
            ,      C_WCAFTERMETHOD
            ,      C_WCMETHODMEMO
            ,      C_WCPREPLACE
            ,      C_WCAFTERPLACE
            ,      C_WCPLACEMEMO
            ,      C_WCPREPROVIDE
            ,      C_WCAFTERPROVIDE
            ,      C_WCPROVIDEMEMO
            ,      C_WCPRETRANSFER
            ,      C_WCAFTERTRANSFER
            ,      C_WCTRANSFERMEMO
            ,      C_WCPRESPECIAL
            ,      C_WCAFTERSPECIAL
            ,      C_WCSPECIALMEMO
            ,      C_WCPRESPECIAL1
            ,      C_WCAFTERSPECIAL1
            ,      C_WCSPECIAL1MEMO
            ,      C_WCPRESPECIAL2
            ,      C_WCAFTERSPECIAL2
            ,      C_WCSPECIAL2MEMO
            ,      C_WCPRESPECIAL3
            ,      C_WCAFTERSPECIAL3
            ,      C_WCSPECIAL3MEMO
            ,      C_WCPREDISPLAY
            ,      C_WCAFTERDISPLAY
            ,      CREATE_SEQ
            ,      CREATE_DATE
            ,      MODIFY_SEQ
            ,      MODIFY_DATE
            )
        VALUES
            (
                   #{c_wikey}
            ,      '0000000001'
            ,      NOW()
            ,      NULL
            ,      #{manageDeptSeq}
            ,      NULL
            ,      #{c_wiuserkey}
            ,      DATE_FORMAT(NOW(), '%Y%m%d')
            ,      NULL
            ,      #{c_winame}
            ,      NULL
            ,      NULL
            ,      #{c_wiafternicname}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterexplain}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterpreserve}
            ,      NULL
            ,      NULL
            ,      #{c_wiaftermethod}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterplace}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterprovide}
            ,      NULL
            ,      NULL
            ,      #{c_wiaftertransfer}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterspecial}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterspecial1}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterspecial2}
            ,      NULL
            ,      NULL
            ,      #{c_wiafterspecial3}
            ,      NULL
            ,      NULL
            ,      #{c_widisplay}
            ,      #{loginVO.uniqId}
            ,      NOW()
            ,      #{loginVO.uniqId}
            ,      NOW()
            )
    </insert>

    <update id="setBusinessUnitCodeInfoUpd" parameterType="map">
        /* setBusinessUnitCodeInfoUpd */
        UPDATE NEOS.A_WORKCODEINFO
        SET    C_WINAME          = #{c_winame}
          ,    C_WIAFTERNICNAME  = #{c_wiafternicname}
          ,    C_WIAFTEREXPLAIN  = #{c_wiafterexplain}
          ,    C_REFPRESERVE     = #{c_refpreserve}
          ,    C_EFFPRESERVE     = #{c_effpreserve}
          ,    C_DUTYPRESERVE    = #{c_dutypreserve}
          ,    C_VALUEPRESERVE   = #{c_valuepreserve}
          ,    C_ASSPRESERVE     = #{c_asspreserve}
          ,    C_RESPPRESERVE    = #{c_resppreserve}
          ,    C_WIAFTERMETHOD   = #{c_wiaftermethod}
          ,    C_WIAFTERPLACE    = #{c_wiafterplace}
          ,    C_WIAFTERPROVIDE  = #{c_wiafterprovide}
          ,    C_WIAFTERTRANSFER = #{c_wiaftertransfer}
          ,    C_WIREADING       = #{c_wireading}
          ,    C_WIMAINREADING   = #{c_wimainreading}
          ,    C_WIDISPLAY       = IF(#{c_widisplay} = '', NULL, #{c_widisplay})
          ,    C_WIAFTERSPECIAL  = #{c_wiafterspecial}
          ,    C_WIAFTERSPECIAL1 = #{c_wiafterspecial1}
          ,    C_WIAFTERSPECIAL2 = #{c_wiafterspecial2}
          ,    C_WIAFTERSPECIAL3 = #{c_wiafterspecial3}
          ,    ORD               = IF(#{c_widisplay} = '', NULL, #{c_widisplay})
          ,    C_WILASTDATE      = NOW()
          ,    C_WIGUBUN         = #{c_wigubun}
          ,    C_WICOMPSEQ       = #{c_wicompseq}
          ,    C_WIORGCODE       = #{c_wiorgcode}
          ,    C_WICHILDRENYN    = #{c_wichildrenyn}
          ,    MODIFY_SEQ        = #{loginVO.uniqId}
          ,    MODIFY_DATE  	 = NOW()
          ,    C_WIAFTEROrgCode  = #{c_wiorgcode}
        WHERE C_WIKEY = #{c_wikey}
    </update>

    <update id="setBusinessUnitCodeInfoUpdHist" parameterType="map">
        /* setBusinessUnitCodeInfoUpdHist */
        INSERT INTO NEOS.A_WORKCODEHISTORY
            (
                   C_WIKEY
            ,      C_WCSEQNUM
            ,      C_WCDATE
            ,      C_WCPREORGCODE
            ,      C_WCAFTERORGCODE
            ,      C_WCPREUSERKEY
            ,      C_WCAFTERUSERKEY
            ,      C_WCSTANDARDDAY
            ,      C_WCPRENAME
            ,      C_WCAFTERNAME
            ,      C_WCNAMEMEMO
            ,      C_WCPRENICNAME
            ,      C_WCAFTERNICNAME
            ,      C_WCNICNAMEMEMO
            ,      C_WCPREEXPLAIN
            ,      C_WCAFTEREXPLAIN
            ,      C_WCEXPLAINMEMO
            ,      C_WCPREPRESERVE
            ,      C_WCAFTERPRESERVE
            ,      C_WCPRESERVEMEMO
            ,      C_WCPREMETHOD
            ,      C_WCAFTERMETHOD
            ,      C_WCMETHODMEMO
            ,      C_WCPREPLACE
            ,      C_WCAFTERPLACE
            ,      C_WCPLACEMEMO
            ,      C_WCPREPROVIDE
            ,      C_WCAFTERPROVIDE
            ,      C_WCPROVIDEMEMO
            ,      C_WCPRETRANSFER
            ,      C_WCAFTERTRANSFER
            ,      C_WCTRANSFERMEMO
            ,      C_WCPRESPECIAL
            ,      C_WCAFTERSPECIAL
            ,      C_WCSPECIALMEMO
            ,      C_WCPRESPECIAL1
            ,      C_WCAFTERSPECIAL1
            ,      C_WCSPECIAL1MEMO
            ,      C_WCPRESPECIAL2
            ,      C_WCAFTERSPECIAL2
            ,      C_WCSPECIAL2MEMO
            ,      C_WCPRESPECIAL3
            ,      C_WCAFTERSPECIAL3
            ,      C_WCSPECIAL3MEMO
            ,      C_WCPREDISPLAY
            ,      C_WCAFTERDISPLAY
            ,      CREATE_SEQ
            ,      CREATE_DATE
            ,      MODIFY_SEQ
            ,      MODIFY_DATE
            )
            SELECT
                C_WIKEY
                , LPAD(CONVERT(C_WCSEQNUM, INT) + 1, 10, '0') AS C_WCSEQNUM
                , NOW() AS C_WCDATE
                , C_WCAFTERORGCODE AS C_WCPREORGCODE
                <if test="c_wiorgcode == null or c_wiorgcode == ''">
                    , C_WCAFTERORGCODE AS C_WCAFTERORGCODE
                </if>
                <if test="c_wiorgcode != null and c_wiorgcode != ''">
                    , #{c_wiorgcode} AS C_WCAFTERORGCODE
                </if>
                , C_WCAFTERUSERKEY AS C_WCPREUSERKEY
                <if test="c_wiuserkey == null or c_wiuserkey == ''">
                    , C_WCAFTERUSERKEY AS C_WCAFTERUSERKEY
                </if>
                <if test="c_wiuserkey != null and c_wiuserkey != ''">
                    , #{c_wiuserkey} AS C_WCAFTERUSERKEY
                </if>
                , DATE_FORMAT(NOW(), '%Y%m%d') AS C_WCSTANDARDDAY
                , C_WCAFTERNAME AS C_WCPRENAME
                , #{c_winame} AS C_WCAFTERNAME
                , '' AS C_WCNAMEMEMO
                , C_WCAFTERNICNAME AS C_WCPRENICNAME
                , #{c_wiafternicname} AS C_WCAFTERNICNAME
                , '' AS C_WCNICNAMEMEMO
                , C_WCAFTEREXPLAIN AS C_WCPREEXPLAIN
                , #{c_wiafterexplain} AS C_WCAFTEREXPLAIN
                , '' AS C_WCEXPLAINMEMO
                , C_WCAFTERPRESERVE AS C_WCPREPRESERVE
                , #{c_wiafterpreserve} AS C_WCAFTERPRESERVE
                , '' AS C_WCPRESERVEMEMO
                , C_WCAFTERMETHOD AS C_WCPREMETHOD
                , #{c_wiaftermethod} AS C_WCAFTERMETHOD
                , '' AS C_WCMETHODMEMO
                , C_WCAFTERPLACE AS C_WCPREPLACE
                , #{c_wiafterplace} AS C_WCAFTERPLACE
                , '' AS C_WCPLACEMEMO
                , C_WCAFTERPROVIDE AS C_WCPREPROVIDE
                , #{c_wiafterprovide} AS C_WCAFTERPROVIDE
                , '' AS C_WCPROVIDEMEMO
                , C_WCAFTERTRANSFER AS C_WCPRETRANSFER
                , #{c_wiaftertransfer} AS C_WCAFTERTRANSFER
                , '' AS C_WCTRANSFERMEMO
                , C_WCAFTERSPECIAL AS C_WCPRESPECIAL
                , #{c_wiafterspecial} AS C_WCAFTERSPECIAL
                , '' AS C_WCSPECIALMEMO
                , C_WCAFTERSPECIAL1 AS C_WCPRESPECIAL1
                , #{c_wiafterspecial1} AS C_WCAFTERSPECIAL1
                , '' AS C_WCSPECIAL1MEMO
                , C_WCAFTERSPECIAL2 AS C_WCPRESPECIAL2
                , #{c_wiafterspecial2} AS C_WCAFTERSPECIAL2
                , '' AS C_WCSPECIAL2MEMO
                , C_WCAFTERSPECIAL3 AS C_WCPRESPECIAL3
                , #{c_wiafterspecial3} AS C_WCAFTERSPECIAL3
                , '' AS C_WCSPECIAL3MEMO
                , C_WCAFTERDISPLAY AS C_WCPREDISPLAY
                , IF(#{c_widisplay} = '', NULL, #{c_widisplay}) AS C_WCAFTERDISPLAY
                , #{loginVO.uniqId} AS CREATE_SEQ
                , NOW() AS CREATE_DATE
                , #{loginVO.uniqId} AS MODIFY_SEQ
                , NOW() AS MODIFY_DATE
            FROM
                NEOS.A_WORKCODEHISTORY
            WHERE
                C_WIKEY = #{c_wikey}
            ORDER BY C_WCSEQNUM DESC
            LIMIT 1
    </update>

    <select id="getOrgPathList" parameterType="map" resultType="map">
        /* getOrgPathList - mariaDB */

        SELECT
            B.gbn_org AS GBN_ORG,
            c.group_seq AS GROUP_SEQ,
            B.comp_seq AS COMP_SEQ,
            (CASE WHEN b.gbn_org = 'c' THEN '0' ELSE IFNULL(B.dept_seq, '0') END) AS DEPT_SEQ,
            '0' AS EMP_SEQ
        FROM
            NEOS.t_co_orgchart_name B
        INNER JOIN
            NEOS.t_co_comp c ON b.comp_seq = c.comp_seq
        INNER JOIN
            NEOS.t_co_orgchart_name A ON CONCAT(A.path, '|')  LIKE CONCAT(B.path, '|%') AND A.gbn_org = 'd' AND A.dept_seq = #{deptSeq}
    </select>

    <select id="getBusinessUnitList" parameterType="map" resultType="map">
        /* getBusinessUnitList*/
        SELECT
            W.C_WIKEY    AS C_WIKEY
            , W.C_WITKEY   AS C_WITKEY
            , W.C_WIORGCODE AS C_WIORGCODE
            , W.C_WITEMPCODE AS C_WITEMPCODE
            , W.C_WISKILLCODE AS C_WISKILLCODE
            , W.C_WISKILLNAME AS C_WISKILLNAME
            , W.C_WICODE  AS C_WICODE
            , W.C_WIDISPLAY AS C_WIDISPLAY
            , W.C_WISTEP AS C_WISTEP
            , W.C_WISTATUS AS C_WISTATUS
            , DATE_FORMAT(W.C_WIREGDATE, '%Y-%m-%d') C_WIREGDATE
            , DATE_FORMAT (W.C_WILASTDATE, '%Y-%m-%d') C_WILASTDATE
            , W.C_WIAFTERORGCODE AS C_WIAFTERORGCODE
            , NEOS.FN_GetMultiLang(#{loginVo.langCode}, dept_name_multi) DEPTNAME
            , W.C_WIAFTERUSERKEY AS C_WIAFTERUSERKEY
            , NEOS.FN_GetMultiLang(#{loginVo.langCode}, emp_name_multi) USERNAME
            , W.C_WISTANDARDDAY AS C_WISTANDARDDAY
            , W.C_WINAME AS C_WINAME
            , W.C_WIAFTERNICNAME AS C_WIAFTERNICNAME
            , W.C_WIAFTERPRESERVE AS C_WIAFTERPRESERVE
            , NEOS.GET_CODE_DETAIL_Info('0', 'COM104', W.C_ASSPRESERVE ,#{loginVo.langCode}) AS PRESERVENAME
            , W.C_WIAFTERMETHOD AS C_WIAFTERMETHOD
            , NEOS.GET_CODE_DETAIL_Info('0', 'COM132', W.C_WIAFTERMETHOD ,#{loginVo.langCode}) AS METHODNAME
            , W.C_WIAFTERPLACE AS C_WIAFTERPLACE
            , NEOS.GET_CODE_DETAIL_Info('0', 'COM133', W.C_WIAFTERPLACE ,#{loginVo.langCode}) AS PLACENAME
            , W.C_WIAFTERPROVIDE AS C_WIAFTERPROVIDE
            , W.C_WIAFTEREXPLAIN AS C_WIAFTEREXPLAIN
            , W.C_REFPRESERVE AS C_REFPRESERVE
            , W.C_EFFPRESERVE AS C_EFFPRESERVE
            , W.C_DUTYPRESERVE AS C_DUTYPRESERVE
            , W.C_VALUEPRESERVE AS C_VALUEPRESERVE
            , W.C_ASSPRESERVE AS C_ASSPRESERVE
            , W.C_RESPPRESERVE AS C_RESPPRESERVE
            , W.C_WIAFTERTRANSFER AS C_WIAFTERTRANSFER
            , W.C_WIREADING AS C_WIREADING
            , W.C_WIMAINREADING AS C_WIMAINREADING
            , W.C_WIAFTERSPECIAL AS C_WIAFTERSPECIAL
            , W.C_WIAFTERSPECIAL1 AS C_WIAFTERSPECIAL1
            , W.C_WIAFTERSPECIAL2 AS C_WIAFTERSPECIAL2
            , W.C_WIAFTERSPECIAL3 C_WIAFTERSPECIAL3
            , C_WIGUBUN    AS C_WIGUBUN
            , C_WIGROUPSEQ AS C_WIGROUPSEQ
            , C_WICOMPSEQ  AS C_WICOMPSEQ
            , C_WICHILDRENYN AS C_WICHILDRENYN
        FROM
            (
                SELECT
                    a.*
                    , CASE WHEN C_WIGUBUN = 'g' THEN 1 WHEN C_WIGUBUN = 'c' THEN 2 ELSE 3 END AS LANK
                FROM 
                    NEOS.A_WORKCODEINFO a
                WHERE C_WISTATUS &lt; '3'
                <if test="SeFlag != null and SeFlag != ''">
                    <if test="compSeq == null or compSeq == ''">
                        AND   C_WIGUBUN = 'g' AND C_WIGROUPSEQ = #{loginVo.groupSeq}
                    </if>
                    <if test="compSeq != null and compSeq != ''">
                        AND ( (C_WIGUBUN = 'g' AND C_WIGROUPSEQ = #{loginVo.groupSeq})
                        OR (C_WIGUBUN = 'c' AND C_WICOMPSEQ = #{compSeq} ))
                    </if>
                </if>
                <if test="SeFlag == null or SeFlag == ''">
                    AND ( (C_WIGUBUN = 'g' AND C_WIGROUPSEQ = #{loginVo.groupSeq})
                    OR (C_WIGUBUN = 'c' AND C_WICOMPSEQ = #{compSeq} )
                    OR (C_WIGUBUN = 'd'  AND C_WIAFTERORGCODE = #{manageDeptSeq})
                    OR (C_WIGUBUN = 'd'  AND C_WICHILDRENYN = 'Y' AND C_WIAFTERORGCODE IN (${orgPathQuery})) )
                </if>
                <if test="searchKeyword != null and searchKeyword != ''">
                    AND C_WINAME LIKE CONCAT('%', #{searchKeyword} ,'%')
                </if>
            ) W
        LEFT OUTER JOIN 
                NEOS.V_T_CO_EMP_MULTI EM ON EM.EMP_SEQ = W.C_WIAFTERUSERKEY
        LEFT OUTER JOIN 
                NEOS.V_T_CO_DEPT_MULTI DM ON DM.DEPT_SEQ = W.C_WIAFTERORGCODE
        ORDER BY LANK, LPAD(IFNULL(C_WIDISPLAY, 99999999), 20 , 0), C_WINAME, C_WIREGDATE DESC
    </select>
</mapper>