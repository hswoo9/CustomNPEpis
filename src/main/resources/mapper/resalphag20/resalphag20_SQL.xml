<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="resalphag20">

	<select id="resalphag20.getFormInfo" parameterType="Map" resultType="Map">
		/*resalphag20.getFormInfo*/
		select a.*, b.apply_api
		from neos.a_templateinfo a, neos.teag_out_process b
		where a.form_d_tp = b.out_process_id
		and a.form_d_tp = #{outProcessId}
		and a.c_timemo like concat('%', #{type},'%')
		limit 1
	</select>
	
	<select id="resalphag20.getIframeUrl" parameterType="Map" resultType="String">
		/*resalphag20.getIframeUrl*/
		select iframe_url 
		from neos.t_exnp_out_process
		where interface_id = #{outProcessInterfaceId}
	</select>
	
	<select id="resalphag20.getCustIframeHeight" parameterType="Map" resultType="String">
		/*resalphag20.getCustIframeHeight*/
		select iframe_height 
		from neos.t_exnp_out_process
		where interface_id = #{outProcessInterfaceId}
	</select>
	
	<select id="resalphag20.getInterfaceIds" parameterType="Map" resultType="Map">
		/*resalphag20.getInterfaceIds*/
		select * 
		from neos.t_exnp_out_process
	</select>
	
	<select id="resalphag20.getOnnaraServerInfo" resultType="map">
		/*resalphag20.getOnnaraServerInfo*/
		SELECT * FROM cust_epis.if_onnara_sftp_info where use_yn = 1
	</select>
	
	<select id="resalphag20.checkAttachFile" resultType="map" parameterType="map">
		/*resalphag20.checkAttachFile */
		SELECT * FROM cust_epis.if_onnara_moved_file
					WHERE o_docid = #{DOCID}
						AND gubun = 'DFT01'
	</select>
	
	<select id="resalphag20.getOnnaraMovedFile" resultType="map" parameterType="map">
		/*resalphag20.getOnnaraMovedFile */
		SELECT * FROM cust_epis.if_onnara_moved_file
					WHERE o_docid = #{DOCID}
	</select>
	
	<select id="resalphag20.downloadFileInfo" resultType="map" parameterType="map">
		/*resalphag20.downloadFileInfo */
		SELECT * FROM cust_epis.if_onnara_moved_file
					WHERE o_file_id = #{fileId}
	</select>
	
	<insert id="resalphag20.saveFileInfo" parameterType="map">
		INSERT INTO CUST_EPIS.if_onnara_moved_file
			(o_docid
			,file_seq
            ,o_real_file_name
            ,o_org_file_name
            ,gw_file_path
            ,o_file_path
            ,extension
            ,file_size
            ,use_yn
            ,created_dt
            ,gubun
            ,o_file_id
            ,o_indt
            ,yyyyMM)
            VALUES (#{DOCID}
					,#{FLEORDER}
                    ,#{SFILENAME}
                    ,#{FLETTL}
                    ,#{gwFilePath}
                    ,#{oFilePath}
                    ,#{extension}
                    ,#{FLESIZE}
                    ,'Y'
                    ,now()
                    ,#{GUBUN}
                    ,#{FLEID}
                    ,#{INDT}
                    ,#{yyyyMM});
	</insert>
	
	<select id="getDocMappingOnnaraDocId" parameterType="map" resultType="map">
		SELECT *
			FROM cust_epis.IF_ONNARA_MAPPING
			WHERE targetSeq = #{targetSeq}
			AND targetType = #{targetType}
			AND use_yn = 'Y'
	</select>
	
	<insert id="saveOnnaraMapping" parameterType="map">
		INSERT INTO cust_epis.IF_ONNARA_MAPPING
			( targetSeq, targetType, o_docid, docRegDate )
		values 
			( #{targetSeq}, #{targetType}, #{docId}, DATE_FORMAT(STR_TO_DATE(#{docRegDate}, '%Y%m%d'),'%Y-%m-%d '))
	</insert>
	
	<insert id="saveToAttachInfo" parameterType="map">
		INSERT INTO neos.a_attachinfo
			( c_dikeycode, c_aiseqnum, c_aititle, c_aifilename, c_aifiletype, c_ailastdate, c_aisize, file_id, c_aipublic )
		values 
			( #{c_dikeycode}, (select IFNULL(MAX(c_aiseqnum) + 1, 1) from neos.a_attachinfo where c_dikeycode = #{c_dikeycode}), #{c_aititle}, #{c_aifilename}, #{c_aifiletype}, now(), #{c_aisize}, #{file_id},  'Y' )
	</insert>
	
	<insert id="saveToAttachFile" parameterType="map">
		INSERT INTO neos.t_co_atch_file
			( file_id, use_yn, create_seq, create_date )
		values 
			( #{file_id}, 'Y', #{create_seq}, now() )
	</insert>
	
	<insert id="saveToAttachFileDetail" parameterType="map">
		INSERT INTO neos.t_co_atch_file_detail
			( file_id, file_sn, path_seq, file_stre_cours, stre_file_name, orignl_file_name, file_extsn, file_size, use_yn )
		values 
			( #{file_id}, #{file_sn}, '200', #{file_stre_cours}, #{stre_file_name}, #{orignl_file_name}, #{file_extsn}, #{file_size},  'Y' )
	</insert>
	
	<select id="resalphag20.getFileList" resultType="map" parameterType="map">
		/*resalphag20.getFileList */
		
		select * from cust_epis.if_onnara_mapping A 
		inner join cust_epis.if_onnara_moved_file B
			on A.o_docid = B.o_docid
			where targetSeq = #{targetSeq}
			and targetType = #{targetType}				
			and A.use_yn = 'Y'	
	</select>
	
	<select id="resalphag20.getRiOrgCode" resultType="map" parameterType="map">
		/*resalphag20.getRiOrgCode */
		
		select * from neos.a_recordinfo
				where c_dikeycode = #{c_dikeycode}
	</select>
	
	<select id="resalphag20.checkDupliOnnaraFileId" resultType="int" parameterType="map">
		/*resalphag20.checkDupliOnnaraFileId */
		
		select IFNULL(count(*),0) from neos.t_co_atch_file
				where file_id = #{file_id}
	</select>
	
	<update id="resalphag20.updateOnnaraUsedStatus" parameterType="map">
		/*resalphag20.updateOnnaraUsedStatus */
		
		update cust_epis.if_onnara_mapping
			set use_yn = 'N'
			where targetSeq = #{targetSeq}
			and targetType = #{targetType}
	</update>
	
	<insert id="saveUseOnnaraDocs" parameterType="map">
		INSERT INTO cust_epis.if_onnara_used_doc
			( o_docid, c_dikeycode, approval, targetSeq, targetType, create_date )
		values 
			( #{o_docid}, #{docSeq}, 'Y', #{targetSeq}, #{targetType}, now() )
	</insert>
	
	<select id="checkUsedOnnaraDoc" parameterType="map" resultType="int">
		select count(*) from cust_epis.if_onnara_used_doc
					where o_docid = #{DOCID} and approval = 'Y'
	</select>
	
	<select id="getAttachInfo" parameterType="map" resultType="map">
		select * from neos.a_attachinfo A 
			inner join neos.t_co_atch_file_detail B
					on A.file_id = B.file_id and A.c_aiseqnum = B.file_sn where c_dikeycode = #{C_DIKEYCODE} order by file_sn
	</select>
	
	<select id="getAttachInfo2" parameterType="map" resultType="map">
		select A.c_dikeycode
				,c_aititle
		        ,c_aifilename
		        ,c_aifiletype as file_extsn
		        ,c_aisize
		        ,A.file_id
		        ,file_stre_cours
		        ,stre_file_name
		        ,c_aiseqnum
		        ,file_sn
		        ,'' as status
		from neos.a_attachinfo A 
		inner join neos.t_co_atch_file_detail B
		on A.file_id = B.file_id and A.c_aiseqnum = B.file_sn 
        left join cust_epis.dj_resalpha_attach C
        on C.c_dikeycode = #{C_DIKEYCODE} and A.c_aiseqnum = C.file_seq 
		where A.c_dikeycode = #{C_DIKEYCODE} and C.status is null
		and use_yn = 'Y'
		UNION ALL
		select c_dikeycode as c_dikeycode
				,file_name as c_aititle
		        ,CONCAT(real_file_name, ',', file_extension) as c_aifilename
		        ,file_extension as file_extsn 
		        ,file_size as c_aisize
		        ,'' as file_id
		        ,file_path as file_stre_cours
		        ,real_file_name as stre_file_name
				,file_seq as c_aiseqnum
				,file_seq as file_sn
				,status as status
			from cust_epis.dj_resalpha_attach
		    where c_dikeycode = #{C_DIKEYCODE} and status = 'ADD'
	</select>
	
	<insert id="saveTradeBojo" parameterType="map">
		INSERT INTO cust_epis.res_bojo_mapping
			( tradeSeq, resDocSeq, resSeq, trSeq, trName, uid, bojoCode, bojoUse, bojoReasonCode, bojoReasonText, create_date )
		values 
			( #{tradeSeq}, #{resDocSeq}, #{resSeq}, #{trSeq}, #{trName}, #{uid}, #{bojoCode}, #{bojoUse}, #{bojoReasonCode}, #{bojoReasonText}, now()  )
	</insert>
	
	<select id="getTradeBojo" parameterType="map" resultType="map">
		SELECT tradeSeq
					,resDocSeq
					,resSeq
					,trSeq
					,trName
					,uid
			 		,IFNULL(bojoCode, '') as bojoCode
			 		,IFNULL(bojoUse, '') as bojoUse
			 		,IFNULL(bojoReasonCode, '') as bojoReasonCode
			 		,IFNULL(bojoReasonText, '') as bojoReasonText
			 		,create_date
		 FROM cust_epis.res_bojo_mapping
		WHERE  tradeSeq = #{tradeSeq}
	</select>
	
	<update id="updateTradeBojo" parameterType="map">
		UPDATE cust_epis.res_bojo_mapping
			SET
			<choose>
				<when test='key.equals("bojoUse")'>
					bojoUse = #{bojoUse}
					,bojoCode = #{bojoCode}
					<if test='bojoCode.equals("2")'>
						,bojoReasonCode = #{bojoReasonCode}
						,bojoReasonText = #{bojoReasonText}	
					</if>
				</when>
				<when test='key.equals("bojoReasonText")'>
					bojoReasonCode = #{bojoReasonCode}
					,bojoReasonText = #{bojoReasonText}
				</when>	
			</choose>
			WHERE tradeSeq = #{tradeSeq}
	</update>
		
	<select id="resalphag20.getResTrade" parameterType="map" resultType="map">
		/* resalphag20.getResTrade */
		select a.interface_type, b.iss_no from neos.t_exnp_restrade a
		left join
		neos.t_ex_etax_aq_tmp b
		on a.interface_seq = b.sync_id
		and a.interface_type = 'etax'
		where trade_seq = #{trade_seq}
	</select>
	
	<insert id="resalphag20.savePdfEcmMain" parameterType="pdfEcmMainVO">
		/* resalphag20.savePdfEcmMain */
		INSERT INTO cust_epis.c_pdf_duzon_appdoc
			(
				rep_id
				,timestamp_yn
				,comp_seq
				,dept_seq
				,emp_seq
				,pdf_path
				,pdf_name
				,status_cd
				,req_dt
			)
		VALUES
			(
				#{rep_id}
				,'Y'
				,#{comp_seq}
				,#{dept_seq}
				,#{emp_seq}
				,#{pdf_path}
				,#{pdf_name}
				,#{status_cd}
				,now()
			)
	</insert>
	
	<insert id="resalphag20.savePdfEcmFile" parameterType="pdfEcmFileVO">
		/* resalphag20.savePdfEcmFile */
		INSERT INTO cust_epis.c_pdf_duzon_file
			(
				rep_id
				,comp_seq
				,doc_id
				,doc_no
				,doc_path
				,doc_name
				,doc_ext
				,doc_title
				,wm1_yn
				,wm1_type
				,wm1_font_size
				,wm1_fixed_pos
				,wm1_txt
				,wm2_yn
				,wm2_type
				,wm2_font_size
				,wm2_fixed_pos
				,wm2_txt
				,wm3_yn
				,wm3_type
				,wm3_font_size
				,wm3_fixed_pos
				,wm3_txt
			)
		VALUES
			(
				#{rep_id}
				,#{comp_seq}
				,#{doc_id}
				,#{doc_no}
				,#{doc_path}
				,#{doc_name}
				,#{doc_ext}
				,#{doc_title}
				,#{wm1_yn}
				,#{wm1_type}
				,#{wm1_font_size}
				,#{wm1_fixed_pos}
				,#{wm1_txt}
				,#{wm2_yn}
				,#{wm2_type}
				,#{wm2_font_size}
				,#{wm2_fixed_pos}
				,#{wm2_txt}
				,#{wm3_yn}
				,#{wm3_type}
				,#{wm3_font_size}
				,#{wm3_fixed_pos}
				,#{wm3_txt}
			)
	</insert>
	
	<update id="resalphag20.updatePdfStatus" parameterType="pdfEcmFileVO">
		UPDATE cust_epis.c_pdf_duzon_appdoc
			SET status_cd = #{status_cd}
				  ,req_dt = now()
		WHERE rep_id = #{rep_id}
	</update>
	
	<select id="getDocOrg" parameterType="map" resultType="map">
		SELECT * 
			FROM neos.a_docinfo
		WHERE c_dikeycode = #{C_DIKEYCODE}
	</select>
	
	<select id="getOrderedOnnnaraDocAttach" parameterType="map" resultType="map">
	select * 
	from cust_epis.if_onnara_mapping A
	inner join cust_epis.if_onnara_moved_file B
    on A.o_docid = B.o_docid 
	where A.targetSeq = #{targetSeq} and A.targetType = #{targetType} and A.use_yn = 'Y' order by A.docRegDate, A.o_docid, B.gubun
	</select>
	
	<select id="NPUserCardDetailInfo" parameterType="map" resultType="map">
		/* resalphaG20_SQL.xml -  resalphaG20.NPUserCardDetailInfo */
		/* 카드내역 상세 정보 조회 */
		SELECT	
			sync_id		AS 'syncId'
			, owner_reg_no	AS 'ownerRegNo'
			, card_code	AS 'cardCode'
			, card_name	AS 'cardName'
			, IFNULL(card_num, '')	AS 'cardNum'
			, user_name	AS 'userName'
			, IFNULL(auth_num, '')	AS 'authNum'
			, auth_date	AS 'authDate'
			, auth_time	AS 'authTime'
			, aqui_date	AS 'aquiDate'
			, georae_coll	AS 'georaeColl'
			, georae_stat	AS 'georaeStat'
			, georae_cand	AS 'georaeCand'
			, IFNULL(request_amount, '')	AS 'requestAmount'
			, amt_amount	AS 'amtAmount'
			, vat_amount	AS 'vatAmount'
			, IFNULL(ser_amount, '')	AS 'serAmount'
			, fre_amount	AS 'freAmount'
			, IFNULL(amt_md_amount, '')	AS 'amt_md_amount'
			, IFNULL(vat_md_amount, '')	AS 'vat_md_amount'
			, georae_gukga	AS 'georaeGukga'
			, for_amount	AS 'forAmount'
			, usd_amount	AS 'usdAmount'
			, IFNULL(merc_name, '')	AS 'mercName'
			, IFNULL(merc_saup_no, '')	AS 'mercSaupNo'
			, IFNULL(merc_addr, '') 	AS 'mercAddr'
			, merc_repr 	AS 'mercRepr'
			, IFNULL(merc_tel, '') 	AS 'mercTel'
			, merc_zip 	AS 'mercZip'
			, mcc_name 	AS 'mccName'
			, mcc_code 	AS 'mccCode'
			, mcc_stat 	AS 'mccStat'
			, vat_stat 	AS 'vatStat'
			, can_date 	AS 'canDate'
			, ask_site 	AS 'askSite'
			, site_date 	AS 'siteDate'
			, ask_date 	AS 'askDate'
			, ask_time 	AS 'askTime'
			, gongje_no_chk 	AS 'gongjeNoChk'
			, first_date 	AS 'firstDate'
			, cancel_date 	AS 'cancelDate'
			, abroad 	AS 'abroad'
			, van_created_dt 	AS 'vanCreatedDt'
			, van_edited_dt 	AS 'vanEditedDt'
			, created_by 	AS 'createdBy'
			, created_dt 	AS 'createdDt'
			, edited_dt 	AS 'editedDt'
			, edited_by 	AS 'editedBy'
			, edited_action 	AS 'editedAction'
			, createdate 	AS 'createdate'
			, createtime 	AS 'createtime'
			, sett_date 	AS 'settDate'
			, org_coll 	AS 'orgColl'
			, aqui_rate 	AS 'aquiRate'
			, conversion_fee 	AS 'conversionFee'
			, auth_cd 	AS 'authCd'
			, auth_nm 	AS 'authNm'
			, summary_cd 	AS 'summaryCd'
			, summary_nm 	AS 'summaryNm'
			, pjt_cd 	AS 'pjtCd'
			, pjt_nm 	AS 'pjtNm'
			, detail 	AS 'detail'
			, if_m_id 	AS 'ifMId'
			, if_d_id 	AS 'ifDId'
			, del_yn 	AS 'delYn'
			, app_div 	AS 'appDiv'
			, send_yn 	AS 'sendYn'
			, user_send_yn 	AS 'userSendYn'
			, emp_seq	AS 'empSeq'
			, summary_seq	AS 'summarySeq'
			, auth_seq	AS 'authSeq'
			, project_seq	AS 'projectSeq'
			, budget_seq	AS 'budgetSeq'
			, doc_seq	AS 'docSeq'
		FROM	neos.t_ex_card_aq_tmp
		WHERE	sync_id = #{syncId}
	
	</select>
	
	<select id="getAllTradeInfo" parameterType="map" resultType="map">
		select * 
		from neos.t_exnp_restrade
		 where res_doc_seq = #{resDocSeq}
		 	 and interface_seq != ''
	</select>
	
	<select id="getIssNo" parameterType="map" resultType="map">
		select * from neos.t_ex_etax_aq_tmp
		where sync_id = #{syncId}
	</select>
	
	<insert id="resalphag20.saveWorkFee" parameterType="map">
		/*resalphag20.saveWorkFee*/
		insert into res_work_fee (resDocSeq, workFeeData)
		values (#{resDocSeq}, #{workFeeData})
		on duplicate key update workFeeData = #{workFeeData}
	</insert>
	<insert id="resalphag20.saveDailyExp" parameterType="map">
		/*resalphag20.saveDailyExp*/
		insert into res_daily_exp (res_doc_seq, data)
		values (#{resDocSeq}, #{data})
		on duplicate key update data = #{data}
	</insert>
	
	<select id="resalphag20.getDailyExp" parameterType="map" resultType="String">
		/*resalphag20.getDailyExp*/
		select data from res_daily_exp where res_doc_seq = #{resDocSeq}
	</select>
	
	
	<select id="resalphag20.getWorkFee" parameterType="map" resultType="String">
		/*resalphag20.getWorkFee*/
		select workFeeData from res_work_fee where resDocSeq = #{resDocSeq}
	</select>
	
	<select id="resalphag20.getErpEmpSeqInDept" parameterType="map" resultType="map">
		/* resalphaG20.getErpEmpSeqInDept */
		select erp_emp_num 
		from	 neos.t_co_emp_dept A
		inner join neos.t_co_emp B
		on A.emp_seq = B.emp_seq
		where dept_seq = #{deptSeq} and main_dept_yn = 'Y' and B.use_yn = 'Y'
	</select>
	
	<update id="resalphag20.updateCardAqTmp" parameterType="map">
		/* resalphag20.updateCardAqTmp */
		update neos.t_ex_card_aq_tmp 
			set if_m_id = 0, if_d_id = 0, send_yn = null
		where sync_id = #{syncId}
	</update>

    <update id="resalphag20.updateCardAqTmpRollback" parameterType="map">
        /* resalphag20.updateCardAqTmpRollback */
        update neos.t_ex_card_aq_tmp
        set if_m_id = #{if_m_id}, if_d_id = #{if_d_id}, send_yn = #{send_yn}
        where sync_id = #{sync_id}
    </update>
	
	<update id="resalphag20.updateEtaxAqTmp" parameterType="map">
		/* resalphag20.updateEtaxAqTmp */
		update neos.t_ex_etax_aq_tmp 
			set if_m_id = 0, if_d_id = 0, send_yn = 'N'
		where sync_id = #{syncId}
	</update>

    <update id="resalphag20.updateEtaxAqTmpRollback" parameterType="map">
        /* resalphag20.updateEtaxAqTmp */
        update neos.t_ex_etax_aq_tmp
        set if_m_id = #{if_m_id}, if_d_id = #{if_d_id}, send_yn = #{send_yn}
        where sync_id = #{sync_id}
    </update>
	
	<update id="resalphag20.updateRestradeTbl" parameterType="map">
		/* resalphag20.updateRestradeTbl */
		update neos.t_exnp_restrade
			 set interface_seq = '' 
		where interface_seq = #{syncId}
	</update>

    <update id="resalphag20.updateRestradeTblRollback" parameterType="map">
        /* resalphag20.updateRestradeTblRollback */
        update neos.t_exnp_restrade
        set interface_seq = #{sync_id}
        where trade_seq = #{trade_seq}
    </update>
	
	<select id="resalphag20.getEtaxSyncId" parameterType="map" resultType="map">
		/* resalphaG20.getEtaxSyncId */
		select * from neos.t_ex_etax_aq_tmp
					where iss_no = #{issNo} and send_yn = #{statVal} and use_yn = 'Y'
	</select>
	
	<select id="resalphag20.selectPdfErrorDocs" parameterType="map" resultType="map">
		/* resalphaG20.selectPdfErrorDocs */
		SELECT LEFT(SUBSTRING_INDEX(RET_MSG, 'error|', -1), (LENGTH(SUBSTRING_INDEX(RET_MSG, 'error|', -1)) - 10)) AS ERROR_MSG
				  , A.*
		          , B.*
		          , C.*
		FROM CUST_EPIS.C_PDF_DUZON_APPDOC A
				INNER JOIN NEOS.A_DOCINFO B
						ON A.REP_ID = B.C_DIKEYCODE
				INNER JOIN NEOS.T_EXNP_RESDOC C
						ON A.REP_ID = C.DOC_SEQ
					WHERE A.RET_MSG != '성공' AND A.EC_DT > '2020-07-29'
						AND C.create_date BETWEEN #{fromDate} and #{toDate}
					<if test="searchWord != null">
						AND C.doc_no like CONCAT('%',#{searchWord},'%')
					</if>
                    ORDER BY A.REQ_DT DESC
	</select>
	
	<select id="resalphag20.selectAdocuAndDailyDocs" parameterType="map" resultType="map">
	/* resalphaG20.selectAdocuAndDailyDocs */
	select a.*, b.*, c.emp_name, d.pdf_name, d.pdf_path
	from neos.erpgwlink a
	inner join neos.a_docinfo b
	on a.appr_dikey = b.c_dikeycode
	inner join neos.t_co_emp_multi c
    on b.create_seq = c.emp_seq and lang_code = 'kr'
    inner join cust_epis.c_pdf_duzon_appdoc d
	on d.rep_id = a.appr_dikey
	where appr_status = '008'
	<choose>
		<when test='docx_numb != null and !docx_numb.equals("")'>
			and docx_numb = #{docx_numb}
		</when>
		<otherwise>
			and docx_numb like concat('DAILYSCD', #{fill_dt}, '%')
		</otherwise>
	</choose> 
	ORDER BY docx_numb asc
	</select>
	
	<sql id="ForFilter">
	/* 법인카드 승인내역 전체 현황 조건 조회 */

			<if test="partnerName != null and partnerName != ''">
				AND card.merc_name LIKE CONCAT ('%',#{partnerName},'%')
			</if>

			<if test="authNum != null and authNum != ''">
				AND card.auth_num LIKE CONCAT ('%',#{authNum},'%')
			</if>

			<if test="mercSaupNo != null and mercSaupNo != ''">
				AND card.merc_saup_no LIKE CONCAT ('%',#{mercSaupNo},'%')
			</if>
			
	</sql>
	
	<select id="resalphag20.GetCardListFullList" parameterType="map" resultType="map">
		/* resalphaG20.GetCardListFullList */
		/* 법인카드 승인내역 전체 현황 조회 */
		SELECT	final.*
		   ,CASE WHEN (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) = 0 THEN '정산'
				    WHEN (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) != 0 THEN '미정산' END isCal
		FROM
		(
			SELECT
				CASE card.georae_stat 
					WHEN '1' THEN 'N' 
					WHEN '0' THEN 'Y'
					ELSE card.georae_stat 
				 END AS georaeStat /* 구분 ( 승인 / 취소 ) */
				, ( CASE
					WHEN IFNULL(georae_stat, '') = 'Y' OR IFNULL(georae_stat, '') = '0' 
					THEN '취소'
					ELSE '승인'
				END )	AS georaeStatName
				, card.georae_coll	AS georaeColl
				, card.auth_date	AS authDate /* 승인일시 */
				, card.auth_time	AS authTime
				, card.auth_num		AS authNum /* 승인번호 */
				, card.merc_name	AS partnerName /* 사용처 */
				, card.merc_saup_no	AS partnerNo /* 사업자번호 */
				, c.card_name		AS cardName /* 카드명 */
				, card.card_num		AS cardNum /* 카드번호 */
				, card.request_amount	AS reqAmt /* 금액 */
				, card.amt_md_amount	AS stdAmt /* 공급가액 */
				, card.vat_md_amount	AS vatAmt /* 부가세 */
				, IFNULL(send.trade_amt, 0) AS tradeAmt  /* 실제결의금액 */
				, card.ser_amount	AS serAmount /* 서비스 금액 */
				, '' 			AS cardPublicYn /* 공개범위 여부 */
				, card.sync_id 		AS syncId /* 카드 내역 고유 아이디 */
				, c.card_code		AS cardCode /* 카드 코드 */
				, IFNULL(send.form_seq, '')			AS formSeq
				, IFNULL(send.doc_seq, '')		AS docSeq
				, IFNULL(send.doc_emp_name, '') 	AS docEmpName
				, IFNULL(send.doc_emp_name, '') 	AS sendEmpName
				, IFNULL(send.doc_no, '') 		AS docNo
				, IFNULL(send.doc_title, '')		AS docTitle
				, IFNULL(send.doc_status, '')		AS docStatus
				, IFNULL(send.use_code, '')		AS sendYN
				, IFNULL(send.use_code, '')		AS send_yn
				, IFNULL(send.use_code, '')		AS approYN
				, IFNULL(send.use_code, '')		AS appro_yn
				, IFNULL(notUse.not_use_emp_name, '')	AS notUseEmpName
				, IFNULL(notUse.use_code, 'Y')		AS useYN
				, IFNULL(notUse.use_code, 'Y')		AS use_yn
				, IFNULL(receive.transfer_name, '')	AS transferName
				, IFNULL(receive.use_code, '')		AS receiveYN
				, IFNULL(receive.use_code, '')		AS receive_yn
				, IFNULL(send.reason, '') AS reason
	            , IFNULL(send.selfAmt, 0) AS selfAmt
	            , send.create_date AS createDate
	            , IFNULL(send.emp_seq, '') AS empSeq
	            , IFNULL(send.emp_name, '') AS empName
	            , IFNULL(send.ad_reason, '') AS ad_reason
	            , IFNULL(send.adjustAmt, 0) AS adjustAmt
	            , send.ad_create_date AS ad_create_date
	            , IFNULL(send.ad_emp_seq, '') AS ad_emp_seq
	            , IFNULL(send.ad_emp_name, '') AS ad_emp_name
	            , IFNULL((
					select IFNULL(SUM(trade_amt), 0) as trade_amt from neos.t_ex_card_aq_tmp a
					inner join neos.t_exnp_restrade b
					on a.sync_id = b.interface_seq
					inner join neos.t_exnp_resdoc c
					on c.res_doc_seq = b.res_doc_seq and doc_status = '008'
					where a.sync_id = card.sync_id and interface_type = 'card' group by sync_id
	            ), 0) as totalAmt
			FROM    neos.t_ex_card_aq_tmp card 
			LEFT	JOIN neos.t_ex_card c
			ON	card.card_num = replace(c.card_num,'-','')
			LEFT	JOIN (
				SELECT	DISTINCT
					'Y'	AS use_code
					, c.sync_id
					, IFNULL(d.doc_seq, '')	AS doc_seq
					, IFNULL((SELECT emp_name FROM neos.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = d.emp_seq), '') AS doc_emp_name
					, d.doc_no
					, IFNULL(ar.c_riaftertitle, ta.doc_title) AS doc_title
					, doc_status
					, IFNULL(ta.form_id, '') form_seq
					, t.trade_amt
					, sp.reason
	                , sp.selfAmt
	                , sp.create_date
	                , sp.emp_seq
	                , sp.emp_name
	                , sa.reason AS ad_reason
	                , sa.adjustAmt
	                , sa.create_date AS ad_create_date
	                , sa.emp_seq AS ad_emp_seq
	                , sa.emp_name AS ad_emp_name
				FROM 	neos.t_ex_card_aq_tmp	c
				INNER JOIN	neos.t_exnp_restrade t
				ON	c.sync_id = t.interface_seq
				INNER JOIN	neos.t_exnp_resdoc	d
				ON	d.res_doc_seq = t.res_doc_seq
				LEFT JOIN neos.a_recordinfo ar
				ON	d.doc_seq = ar.c_dikeycode
				LEFT JOIN neos.teag_appdoc ta
				ON	d.doc_seq = ta.doc_id	
				LEFT JOIN CUST_EPIS.res_self_pay_card sp
	            ON c.sync_id = sp.sync_id
				LEFT JOIN CUST_EPIS.res_adjust_pay_card sa
	            ON c.sync_id = sa.sync_id
				WHERE	d.doc_seq IS NOT NULL
				 AND	IFNULL(t.interface_type, '') = 'card'
				 AND	IFNULL(d.doc_status, '008') IN ( '001', '002', '003', '004', '008', '009','20', '30', '90' )
				 AND	IFNULL(del_yn, 'N')	= 'N'
			)	send
			ON	card.sync_id = send.sync_id		
			LEFT JOIN	(
				SELECT	
					'Y'	AS use_code
					, sync_id	AS sync_id
					, transfer_name	AS transfer_name
				FROM	neos.t_ex_card_transfer  t
				WHERE	IFNULL(use_yn, 'Y')  = 'Y'
				 AND 	IFNULL(receive_seq, '') != ''
			)	receive
			ON	card.sync_id = receive.sync_id		
			LEFT JOIN	(
				SELECT	
					'N'		AS use_code
					, sync_id	AS sync_id
					, IFNULL((SELECT emp_name FROM neos.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = aq.use_yn_emp_seq), '')	AS not_use_emp_name
				FROM	neos.t_ex_card_transfer	aq
				 WHERE	IFNULL(use_yn, 'N')  = 'N'
			)	notUse
			ON card.sync_id = notUse.sync_id			
			WHERE   card.auth_date BETWEEN #{fromDate} AND #{toDate} <include refid="ForFilter"/>
			GROUP BY card.card_num, card.auth_date, card.auth_num, card.auth_time, card.georae_stat, card.georae_coll
			ORDER BY auth_date DESC, auth_time DESC
		) as final
		<choose>
			<when test="adjustment == 1">
				WHERE (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) = 0
			</when>
			<when test="adjustment == 2">
				WHERE (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) != 0
			</when>
		</choose>
		LIMIT ${skip} , ${pageSize}		
	</select>
	<select id="selectCardFullListTotal"  parameterType="map" resultType="int">
	/* resalphaG20.selectCardFullListTotal */
	/* 법인카드 승인내역 전체 현황 개수 조회 */
	SELECT	count(*)
	FROM
	(
		SELECT
			CASE card.georae_stat 
				WHEN '1' THEN 'N' 
				WHEN '0' THEN 'Y'
				ELSE card.georae_stat 
			 END AS georaeStat /* 구분 ( 승인 / 취소 ) */
			, ( CASE
				WHEN IFNULL(georae_stat, '') = 'Y' OR IFNULL(georae_stat, '') = '0' 
				THEN '취소'
				ELSE '승인'
			END )	AS georaeStatName
			, card.georae_coll	AS georaeColl
			, card.auth_date	AS authDate /* 승인일시 */
			, card.auth_time	AS authTime
			, card.auth_num		AS authNum /* 승인번호 */
			, card.merc_name	AS partnerName /* 사용처 */
			, card.merc_saup_no	AS partnerNo /* 사업자번호 */
			, c.card_name		AS cardName /* 카드명 */
			, card.card_num		AS cardNum /* 카드번호 */
			, card.request_amount	AS reqAmt /* 금액 */
			, card.amt_md_amount	AS stdAmt /* 공급가액 */
			, card.vat_md_amount	AS vatAmt /* 부가세 */
			, IFNULL(send.trade_amt, 0) AS tradeAmt  /* 실제결의금액 */
			, card.ser_amount	AS serAmount /* 서비스 금액 */
			, '' 			AS cardPublicYn /* 공개범위 여부 */
			, card.sync_id 		AS syncId /* 카드 내역 고유 아이디 */
			, c.card_code		AS cardCode /* 카드 코드 */
			, IFNULL(send.form_seq, '')			AS formSeq
			, IFNULL(send.doc_seq, '')		AS docSeq
			, IFNULL(send.doc_emp_name, '') 	AS docEmpName
			, IFNULL(send.doc_emp_name, '') 	AS sendEmpName
			, IFNULL(send.doc_no, '') 		AS docNo
			, IFNULL(send.doc_title, '')		AS docTitle
			, IFNULL(send.doc_status, '')		AS docStatus
			, IFNULL(send.use_code, '')		AS sendYN
			, IFNULL(send.use_code, '')		AS send_yn
			, IFNULL(send.use_code, '')		AS approYN
			, IFNULL(send.use_code, '')		AS appro_yn
			, IFNULL(notUse.not_use_emp_name, '')	AS notUseEmpName
			, IFNULL(notUse.use_code, 'Y')		AS useYN
			, IFNULL(notUse.use_code, 'Y')		AS use_yn
			, IFNULL(receive.transfer_name, '')	AS transferName
			, IFNULL(receive.use_code, '')		AS receiveYN
			, IFNULL(receive.use_code, '')		AS receive_yn
			, IFNULL(send.reason, '') AS reason
            , IFNULL(send.selfAmt, 0) AS selfAmt
            , send.create_date AS createDate
            , IFNULL(send.emp_seq, '') AS empSeq
            , IFNULL(send.emp_name, '') AS empName
            , IFNULL(send.ad_reason, '') AS ad_reason
            , IFNULL(send.adjustAmt, 0) AS adjustAmt
            , send.ad_create_date AS ad_create_date
            , IFNULL(send.ad_emp_seq, '') AS ad_emp_seq
            , IFNULL(send.ad_emp_name, '') AS ad_emp_name
            , IFNULL((
				select IFNULL(SUM(trade_amt), 0) as trade_amt from neos.t_ex_card_aq_tmp a
				inner join neos.t_exnp_restrade b
				on a.sync_id = b.interface_seq
				inner join neos.t_exnp_resdoc c
				on c.res_doc_seq = b.res_doc_seq and doc_status = '008'
				where a.sync_id = card.sync_id and interface_type = 'card' group by sync_id
            ), 0) as totalAmt
		FROM    neos.t_ex_card_aq_tmp card 
		LEFT	JOIN neos.t_ex_card c
		ON	card.card_num = replace(c.card_num,'-','')
		LEFT	JOIN (
			SELECT	DISTINCT
				'Y'	AS use_code
				, c.sync_id
				, IFNULL(d.doc_seq, '')	AS doc_seq
				, IFNULL((SELECT emp_name FROM neos.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = d.emp_seq), '') AS doc_emp_name
				, d.doc_no
				, IFNULL(ar.c_riaftertitle, ta.doc_title) AS doc_title
				, doc_status
				, IFNULL(ta.form_id, '') form_seq
				, t.trade_amt
				, sp.reason
                , sp.selfAmt
                , sp.create_date
                , sp.emp_seq
                , sp.emp_name
                , sa.reason AS ad_reason
                , sa.adjustAmt
                , sa.create_date AS ad_create_date
                , sa.emp_seq AS ad_emp_seq
                , sa.emp_name AS ad_emp_name
			FROM 	neos.t_ex_card_aq_tmp	c
			INNER JOIN	neos.t_exnp_restrade t
			ON	c.sync_id = t.interface_seq
			INNER JOIN	neos.t_exnp_resdoc	d
			ON	d.res_doc_seq = t.res_doc_seq
			LEFT JOIN neos.a_recordinfo ar
			ON	d.doc_seq = ar.c_dikeycode
			LEFT JOIN neos.teag_appdoc ta
			ON	d.doc_seq = ta.doc_id	
			LEFT JOIN CUST_EPIS.res_self_pay_card sp
            ON c.sync_id = sp.sync_id
			LEFT JOIN CUST_EPIS.res_adjust_pay_card sa
            ON c.sync_id = sa.sync_id
			WHERE	d.doc_seq IS NOT NULL
			 AND	IFNULL(t.interface_type, '') = 'card'
			 AND	IFNULL(d.doc_status, '008') IN ( '001', '002', '003', '004', '008', '009','20', '30', '90' )
			 AND	IFNULL(del_yn, 'N')	= 'N'
		)	send
		ON	card.sync_id = send.sync_id		
		LEFT JOIN	(
			SELECT	
				'Y'	AS use_code
				, sync_id	AS sync_id
				, transfer_name	AS transfer_name
			FROM	neos.t_ex_card_transfer  t
			WHERE	IFNULL(use_yn, 'Y')  = 'Y'
			 AND 	IFNULL(receive_seq, '') != ''
		)	receive
		ON	card.sync_id = receive.sync_id		
		LEFT JOIN	(
			SELECT	
				'N'		AS use_code
				, sync_id	AS sync_id
				, IFNULL((SELECT emp_name FROM neos.t_co_emp_multi WHERE lang_code = 'kr' AND emp_seq = aq.use_yn_emp_seq), '')	AS not_use_emp_name
			FROM	neos.t_ex_card_transfer	aq
			 WHERE	IFNULL(use_yn, 'N')  = 'N'
		)	notUse
		ON card.sync_id = notUse.sync_id			
		WHERE   card.auth_date BETWEEN #{fromDate} AND #{toDate} <include refid="ForFilter"/>
		GROUP BY card.card_num, card.auth_date, card.auth_num, card.auth_time, card.georae_stat, card.georae_coll
		ORDER BY auth_date DESC, auth_time DESC
	) as final
	<choose>
		<when test="adjustment == 1">
			WHERE (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) = 0
		</when>
		<when test="adjustment == 2">
			WHERE (final.reqAmt - final.totalAmt + final.selfAmt - final.adjustAmt) != 0
		</when>
	</choose>
	</select>
	<insert id="resalphag20.saveReturnCardLog" parameterType="map">
		INSERT INTO CUST_EPIS.res_return_card_log
			(
                sync_id
                ,if_m_id
                ,if_d_id
                ,trade_seq
            )
            VALUES (
                #{sync_id}
                ,#{if_m_id}
                ,#{if_d_id}
                ,#{trade_seq}
            )
	</insert>

    <insert id="resalphag20.saveReturnCardHist" parameterType="map">
        INSERT INTO DJ_EPIS.dj_ex_card_hist
        (
            sync_id
            ,if_m_id
            ,if_d_id
            ,send_yn
            ,trade_seq
        )
        VALUES
        (
           #{sync_id}
           ,#{if_m_id}
           ,#{if_d_id}
           ,#{send_yn}
           ,#{trade_seq}
       )
    </insert>

    <select id="cardHistRollback" parameterType="map" resultType="map">
        SELECT * FROM DJ_EPIS.dj_ex_card_hist
        WHERE sync_id = #{syncId}
        ORDER BY sync_hist_id DESC
        LIMIT 1
    </select>

    <select id="etaxHistRollback" parameterType="map" resultType="map">
        SELECT * FROM DJ_EPIS.dj_ex_etax_hist
        WHERE sync_id = #{sync_id}
        ORDER BY sync_hist_id DESC
        LIMIT 1
    </select>
	
	<select id="resalphag20.selectReturnCardLogInfo" parameterType="map" resultType="map">
	select * from neos.t_ex_card_aq_tmp a
	inner join neos.t_exnp_restrade b
	on a.sync_id = b.interface_seq
	inner join neos.t_exnp_resdoc c
    on c.res_doc_seq = b.res_doc_seq and doc_status = '008'
	where a.sync_id = #{syncId} and interface_type = 'card'
	</select>
	
	<select id="resalphag20.selectReturnCardLog" parameterType="map" resultType="map">
	select * 
	from cust_epis.res_return_card_log a
	inner join neos.t_exnp_restrade b
	on a.trade_seq = b.trade_seq
	where sync_id = #{syncId}
	</select>
	
	<insert id="resalphag20.saveSelfPayCard" parameterType="map">
		/*resalphag20.saveSelfPayCard */
	
		INSERT INTO CUST_EPIS.res_self_pay_card
			(
			sync_id
			,reqAmt
            ,selfAmt
            ,reason
            ,emp_seq
            ,emp_name
            )
            VALUES (
            		#{syncId}
					,#{reqAmt}
                    ,#{selfAmt}
                    ,#{reason}
                    ,#{empSeq}
                    ,#{empName}
                    )
	</insert>
	
	<update id="resalphag20.updateSelfPayCard" parameterType="map">
		/*resalphag20.updateSelfPayCard */
		
		update CUST_EPIS.res_self_pay_card
			set reason = #{reason}, emp_seq = #{empSeq}, emp_name = #{empName}, selfAmt = #{selfAmt}
			where sync_id = #{syncId}
	</update>
	
	<insert id="resalphag20.saveAdjustPayCard" parameterType="map">
		/*resalphag20.saveAdjustPayCard */
	
		INSERT INTO CUST_EPIS.res_adjust_pay_card
			(
			sync_id
			,reqAmt
            ,adjustAmt
            ,reason
            ,emp_seq
            ,emp_name
            )
            VALUES (
            		#{syncId}
					,#{reqAmt}
                    ,#{adjustAmt}
                    ,#{reason}
                    ,#{empSeq}
                    ,#{empName}
                    )
	</insert>
	
	<update id="resalphag20.updateAdjustPayCard" parameterType="map">
		/*resalphag20.updateAdjustPayCard */
		
		update CUST_EPIS.res_adjust_pay_card
			set reason = #{reason}, emp_seq = #{empSeq}, emp_name = #{empName}, adjustfAmt = #{adjustAmt}
			where sync_id = #{syncId}
	</update>
	
	<insert id="resalphag20.saveCardNotionInfo" parameterType="map">
		/*resalphag20.saveCardNotionInfo */
	
		INSERT INTO CUST_EPIS.res_card_notion
			(
			card_num
			,emp_seq
            ,emp_name
            ,dept_seq
            ,dept_name
            ,duty
            ,notion_date
            )
            VALUES (
            		#{cardNum}
					,#{empSeq}
                    ,#{empName}
                    ,#{deptSeq}
                    ,#{deptName}
                    ,#{duty}
                    ,#{notionDate}
                    )
	</insert>
	
	<select id="">
	</select>
	
	<delete id="resalphag20.deleteCardNotionInfo" parameterType="map">
	/*resalphag20.deleteCardNotionInfo */
	
	DELETE FROM CUST_EPIS.res_card_notion
			WHERE card_num = #{cardNum}
				AND emp_seq = #{empSeq}
	
	</delete>
	
	<select id="resalphag20.selectCardNotionInfoList" parameterType="map" resultType="map">
	/*resalphag20.selectCardNotionInfoList */
	
	select  card_num as cardNum
			  ,emp_seq as empSeq
			  ,emp_name as empName
			  ,dept_seq as deptSeq
			  ,dept_name as deptName
			  ,duty as duty
			  ,notion_date as notionDate
	from cust_epis.res_card_notion
	where use_yn = 'Y'
	<if test="cardNum != null and !cardNum.equals('')">
	 and card_num = #{cardNum}
	</if>
	<if test="empSeq != null and !empSeq.equals('')">
	 and emp_seq = #{empSeq}
	</if>
	</select>
	
	<select id="resalphag20.selectCardNotionCycle" parameterType="map" resultType="map">
	/*resalphag20.selectCardNotionCycle */
	
	select  *
	from cust_epis.res_card_alam_cycle
	<where>
		<if test="interfaceType != null and !interfaceType.equals('')">
		 and interface_type = #{interfaceType}
		</if>
	</where>
	</select>
	
	<insert id="resalphag20.saveCardNotionCycle" parameterType="map">
		/*resalphag20.saveCardNotionCycle */
	
		INSERT INTO CUST_EPIS.res_card_alam_cycle
			(
			interface_type
			,cycle
            )
            VALUES (
            		#{interface_type}
					,#{cycle}
                    )
	</insert>
	
	<update id="resalphag20.updateCardNotionCycle" parameterType="map">
	/*resalphag20.updateCardNotionCycle */
	
	UPDATE CUST_EPIS.res_card_alam_cycle
		SET cycle = #{cycle}
	WHERE interface_type = #{interface_type}
	</update>
	
	<select id="resalphag20.selectCardInfoList" parameterType="map" resultType="map">
	/*resalphag20.selectCardInfoList */
	
	 SELECT
              comp_seq                AS compSeq
              , card_code             AS cardCode
              , card_num              AS cardNum
              , card_name             AS cardName
              , partner_code          AS partnerCode
              , partner_name          AS partnerName
              , card_public_json      AS cardPublicJson
              , use_yn                AS useYN
      FROM    neos.t_ex_card
      WHERE   comp_Seq = '1000'
      AND     (
                      REPLACE(card_num,'-','') LIKE CONCAT('%', #{searchWord} ,'%')
              OR      card_name LIKE CONCAT('%', #{searchWord} ,'%')
              OR      partner_code LIKE CONCAT('%', #{searchWord} ,'%')
              OR      partner_name LIKE CONCAT('%', #{searchWord} ,'%')
      )
      <choose>
	      <when test='isOpen == "1"'>
	       AND 			 card_public_json != ''
	      </when>
	      <when test='isOpen == "2"'>
	       AND 			 card_public_json = ''
	      </when>
      </choose>
      AND             use_yn LIKE '%Y%'
	
	</select>
	
	<insert id="resalphag20.saveReturnEtaxLog" parameterType="map">
	/*resalphag20.saveReturnEtaxLog */
	
		INSERT INTO CUST_EPIS.res_return_etax_log
			(
			sync_id
			,if_m_id
            ,if_d_id
            ,trade_seq
            )
            VALUES (
            		#{sync_id}
					,#{if_m_id}
                    ,#{if_d_id}
                    ,#{trade_seq}
                    )
	</insert>
    <insert id="resalphag20.saveReturnEtaxHist" parameterType="map">
        /*resalphag20.saveReturnEtaxHist */

        INSERT INTO DJ_EPIS.dj_ex_etax_hist
        (
            sync_id
            ,if_m_id
            ,if_d_id
            ,trade_seq
            ,send_yn
        )
        VALUES (
                   #{sync_id}
               ,#{if_m_id}
               ,#{if_d_id}
               ,#{trade_seq}
               ,#{send_yn}
               )
    </insert>

	<select id="resalphag20.selectReturnEtaxLog" parameterType="map" resultType="map">
	/*resalphag20.selectReturnEtaxLog */
	
	select * 
	from cust_epis.res_return_etax_log a
	inner join neos.t_exnp_restrade b
	on a.trade_seq = b.trade_seq
	where sync_id = #{syncId}
	</select>
	
	<select id="resalphag20.selectReturnEtaxLogInfo" parameterType="map" resultType="map">
	/*resalphag20.selectReturnEtaxLogInfo */
	
	select * from neos.t_ex_etax_aq_tmp a
	inner join neos.t_exnp_restrade b
	on a.sync_id = b.interface_seq
	inner join neos.t_exnp_resdoc c
    on c.res_doc_seq = b.res_doc_seq and doc_status = '008'
	where a.sync_id = #{sync_id} and interface_type = 'etax'
	</select>
	
	<select id="resalphag20.selectMoniteringDetails" parameterType="map" resultType="map">
	/*resalphag20.selectMoniteringDetails */
	
	SELECT aaa.sync_id AS syncId
			, aaa.iss_no AS issNo
			, aaa.iss_dt AS issDt
			, aaa.send_yn AS syncId
		   ,IFNULL((
			select IFNULL(SUM(trade_amt), 0) as trade_amt from neos.t_ex_etax_aq_tmp a
			inner join neos.t_exnp_restrade b
			on a.sync_id = b.interface_seq
			inner join neos.t_exnp_resdoc c
			on c.res_doc_seq = b.res_doc_seq and doc_status = '008'
			where a.sync_id = aaa.sync_id and interface_type = 'etax' group by sync_id
			), 0) as totalAmt
	  FROM
		  (
	      SELECT sync_id
				 ,iss_no
				 ,iss_dt
				 ,send_yn
			  FROM neos.t_ex_etax_aq_tmp
			 WHERE use_yn = 'Y'
			   AND iss_no = #{ISS_NO}
	      ) AS aaa
	</select>

	<insert id="resalphag20.saveResalphaAttach" parameterType="map">
	/* resalphag20.saveResalphaAttach */
	
	INSERT INTO cust_epis.dj_resalpha_attach
		( c_dikeycode, file_seq, file_name, real_file_name, file_extension, file_path, file_size, status )
	values 
		( #{C_DIKEYCODE}, #{file_seq}, #{file_name}, #{real_file_name}, #{file_extension}, #{file_path}, #{file_size}, #{status} )
	</insert>
	
	<select id="resalphag20.selectResalphaAttachList" parameterType="map" resultType="map">
	/* resalphag20.selectResalphaAttachList */
	
	SELECT c_dikeycode
			  ,file_seq
			  ,file_name
			  ,real_file_name
			  ,file_extension
			  ,file_path
			  ,file_size
			  ,status
		FROM cust_epis.dj_resalpha_attach
	  WHERE c_dikeycode = #{c_dikeycode}
	 <if test='status != null and status.equals("ADD")'>
		AND status = 'ADD'		
	 </if>
	 <if test='status != null and status.equals("DEL")'>
		AND status = 'DEL'
 	</if>		
	</select>
	
	<delete id="resalphag20.deleteResalphaAttach" parameterType="map">
	/* resalphag20.deleteResalphaAttach */
	
	DELETE FROM cust_epis.dj_resalpha_attach
			 WHERE  c_dikeycode = #{c_dikeycode} and file_seq = #{file_sn}
	</delete>
	
	<select id="resalphag20.getCommFileSeq" parameterType="map" resultType="String">
	/* resalphag20.getCommFileSeq */
	
	 SELECT MAX(AA.c_aiseqnum) + 1 as maxSeq 
	 FROM
	 (
	  select c_aiseqnum
	  from neos.a_attachinfo
	  WHERE c_dikeycode = #{C_DIKEYCODE}
	  UNION ALL
	  select file_seq as c_aiseqnum
	  from cust_epis.dj_resalpha_attach
	  WHERE c_dikeycode = #{C_DIKEYCODE}
	 ) AA
	</select>
	
	<select id="resalphag20.checkFinalPDF" parameterType="map" resultType="map">
	/* resalphag20.checkFinalPDF */
	
	 SELECT * FROM cust_epis.c_pdf_duzon_appdoc
	 WHERE rep_id = #{rep_id}
	</select>
	
	<select id="resalphag20.getAdocuTradeInfo"  parameterType="map" resultType="map">
	/* resalphag20.getAdocuTradeInfo */
	SELECT AA.*
	FROM
	(
		SELECT G.*
				 ,D.appr_dikey as ADOCU_APPR_DIKEY
		         ,D.appr_status as ADOCU_DOC_STATUS
				 ,A.res_doc_seq as RES_DOC_SEQ
				 ,A.res_seq as RES_DOC
		         ,A.erp_dept_name as ERP_DEPT_NAME
		         ,A.erp_emp_seq as ERP_EMP_SEQ
		         ,A.erp_emp_name as ERP_EMP_NAME
		         ,A.res_date as RES_DATE
		         ,B.doc_no as DOC_NO
		         ,B.doc_seq as C_DIKEYCODE
		         ,ifnull(E.sms_sender, '') as SMS_SENDER
		         ,ifnull(E.e_nm, '') as SMS_NAME
		         ,ifnull(E.e_phone_num, '') as SMS_PHONE
		         ,ifnull(H.key, '') as SEND_YN
		         ,ifnull(F.c_ridocfullnum, '') as ADOCU_DOC_NO
		   FROM cust_epis.res_adocu_tmp G
		   INNER JOIN neos.t_exnp_reshead A
		   ON A.erp_gisu_date = G.ISU_DT and A.erp_gisu_sq = G.ISU_SQ
		   INNER JOIN neos.t_exnp_resdoc B
		   ON A.res_doc_seq = B.res_doc_seq
		   INNER JOIN neos.a_docinfo C
		   ON B.doc_seq = C.c_dikeycode
		   LEFT JOIN neos.erpgwlink D
		   ON docx_numb = CONCAT('DJADOCUEA_', G.ISU_DT, '_', G.ISU_SQ)
		   LEFT JOIN neos.a_recordinfo F
		   ON D.appr_dikey = F.c_dikeycode
		   LEFT JOIN cust_epis.sms_info E
		   ON E.tr_cd = G.TR_CD
		   LEFT JOIN cust_epis.sms_log H
		   ON H.ISU_DT = G.ISU_DT and H.ISU_SQ = G.ISU_SQ and H.LN_SQ = G.LN_SQ
		   ORDER BY FILL_DT DESC
	   ) as AA
	   <choose>
	   	<when test='STATUS == "0"'>
	   		WHERE AA.SEND_YN = ''
	   	</when>
	   	<when test='STATUS == "1"'>
	   		WHERE AA.SEND_YN != ''
	   	</when>
	   </choose>
	   LIMIT ${skip} , ${pageSize}
	</select>
	
	<select id="resalphag20.getAdocuTradeInfoTotal"  parameterType="map" resultType="String">
	/* resalphag20.getAdocuTradeInfoTotal */
	SELECT COUNT(AA.SEND_YN) as cnt
	FROM
	(
		SELECT ifnull(H.key, '') as SEND_YN
		   FROM cust_epis.res_adocu_tmp G
		   INNER JOIN neos.t_exnp_reshead A
		   ON A.erp_gisu_date = G.ISU_DT and A.erp_gisu_sq = G.ISU_SQ
		   INNER JOIN neos.t_exnp_resdoc B
		   ON A.res_doc_seq = B.res_doc_seq
		   INNER JOIN neos.a_docinfo C
		   ON B.doc_seq = C.c_dikeycode
		   LEFT JOIN neos.erpgwlink D
		   ON docx_numb = CONCAT('DJADOCUEA_', G.ISU_DT, '_', G.ISU_SQ)
		   LEFT JOIN cust_epis.sms_info E
		   ON E.tr_cd = G.TR_CD
		   LEFT JOIN cust_epis.sms_log H
		   ON H.ISU_DT = G.ISU_DT and H.ISU_SQ = G.ISU_SQ and H.LN_SQ = G.LN_SQ
	   ) as AA
    <choose>
   	<when test='STATUS == "0"'>
   		WHERE AA.SEND_YN = ''
   	</when>
   	<when test='STATUS == "1"'>
   		WHERE AA.SEND_YN != ''
   	</when>
   </choose>
	</select>
	
	<insert id="resalphag20.saveInfoAboutSms" parameterType="map">
		/*resalphag20.saveInfoAboutSms*/
		insert into cust_epis.sms_info(e_id_num, e_phone_num, e_nm , sms_sender, tr_cd)
		values (#{e_id_num}, #{e_phone_num},#{e_nm}, #{sms_sender}, #{tr_cd})
		on duplicate key update e_phone_num = #{e_phone_num}
	</insert>
	
	<insert id="resalphag20.saveCardAlamBatch" parameterType="map">
	/*resalphag20.saveCardAlamBatch */
	
		INSERT INTO CUST_EPIS.res_card_alam_log
			(
			sync_id
			,card_name
            ,card_num
            ,partner_name
            ,partner_num
            ,auth_date
            ,send_YN
            ,create_date
            ,modify_date
            )
            VALUES (
            		#{syncId}
					,#{cardName}
                    ,#{cardNum}
                    ,#{partnerName}
                    ,#{partnerNo}
                    ,#{authDate}
                    ,'N'
                    ,now()
                    ,now()
                    )	
	</insert>
	
	<select id="resalphag20.selectCardAlamBatchLog" parameterType="map" resultType="map">
	/*resalphag20.selectCardAlamBatchLog */
	
	SELECT sync_id as syncId
			  ,card_name as cardName
			  ,card_num as cardNum
			  ,partner_name as partnerName
			  ,partner_num as partnerNum
			  ,auth_date as authDate
			  ,send_YN as sendYN
			  ,create_date as createDate
			  ,modify_date as modifyDate
	FROM cust_epis.res_card_alam_log
	WHERE use_yn = 'Y'
	<if test='sendYN != null and !sendYN.equals("")'>
		and A.send_YN = #{sendYN}
	</if>
	</select>
	
	<insert id="resalphag20.saveSmsMessage" parameterType="map">
	/*resalphag20.saveSmsMessage */
	
	INSERT INTO CUST_EPIS.res_sms_message_template
		(
		message
         )
          VALUES (
        		#{message}
                   )	
	</insert>
	
	<update id="resalphag20.updateSmsMessage" parameterType="map">
	/*resalphag20.updateSmsMessage */
	
	UPDATE CUST_EPIS.res_sms_message_template
		SET message = #{message}
	</update>
	
	<select id="resalphag20.selectSmsMessage" parameterType="map" resultType="String">
	/*resalphag20.selectSmsMessage */
	
	SELECT message
	FROM CUST_EPIS.res_sms_message_template limit 1
	</select>
	
	<insert id="resalphag20.saveSmsLog" parameterType="map">
	/*resalphag20.saveSmsLog */
	
	INSERT INTO CUST_EPIS.sms_log
		(
		ISU_DT
		,ISU_SQ
		,LN_SQ
		,TR_CD
		,TR_NM
		,PHONE
		,MESSAGE
		,EMP_SEQ
		,EMP_NAME
		,CREATE_DATE
         )
         VALUES 
         (
        #{ISU_DT}
        ,#{ISU_SQ}
        ,#{LN_SQ}
      	,#{tr_cd}
      	,#{e_nm}
      	,#{e_phone_num}
      	,#{message}
      	,#{empSeq}
      	,#{empName}
      	,now()
         )	
	</insert>
	
	<insert id="resalphag20.saveAdocuTmp" parameterType="map">
	/*resalphag20.saveAdocuTmp */
	
		INSERT INTO CUST_EPIS.res_adocu_tmp
			(
				ISU_DT
				,ISU_SQ
				,LN_SQ
				,CO_CD
				,TR_CD
				,TR_NM
				,CEO_NM
				,UNIT_AM
				,SUP_AM
				,VAT_AM
				,BA_NB
				,DEPOSITOR
				,BTR_CD
				,BTR_NM
				,CTR_CD
				,CTR_NM
				,BG_SQ
				,TR_NMK
				,CEO_NMK
				,BTR_NMK
				,FILL_DT
				,FILL_NB
				,RMK_DC
				,REG_NB
	         )
	         VALUES 
	<foreach collection="list" item="item" separator=" ," >
        (
        #{item.ISU_DT}
		,#{item.ISU_SQ}
		,#{item.LN_SQ}
		,#{item.CO_CD}
		,#{item.TR_CD}
		,#{item.TR_NM}
		,#{item.CEO_NM}
		,#{item.UNIT_AM}
		,#{item.SUP_AM}
		,#{item.VAT_AM}
		,#{item.BA_NB}
		,#{item.DEPOSITOR}
		,#{item.BTR_CD}
		,#{item.BTR_NM}
		,#{item.CTR_CD}
		,#{item.CTR_NM}
		,#{item.BG_SQ}
		,#{item.TR_NMK}
		,#{item.CEO_NMK}
		,#{item.BTR_NMK}
		,#{item.FILL_DT}
		,#{item.FILL_NB}
		,#{item.RMK_DC}
		,#{item.REG_NB}
        )
    </foreach>
	</insert>
	
	<delete id="resalphag20.deleteAdocuTmp" parameterType="map">
	/*resalphag20.deleteAdocuTmp */
	 delete from res_adocu_tmp
	</delete>
		
</mapper>

