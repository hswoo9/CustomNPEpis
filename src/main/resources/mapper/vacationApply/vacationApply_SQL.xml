<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vacationApply">


<!-- 	<select id="viewUserInfo" parameterType = "object" resultType = "map"> -->
<!-- 		SELECT  -->
<!-- 		IFNULL(join_day, '') AS join_day, -->
<!-- 		 team_yn, comp_name FROM neos.v_interlock_user WHERE emp_seq = #{param1} GROUP BY emp_seq -->
<!-- 	</select> -->
	
	<select id="viewUserInfo" parameterType = "object" resultType = "map">
		SELECT 
		IFNULL(join_day, '') AS join_day FROM neos.v_user_info WHERE emp_seq = #{param1} GROUP BY emp_seq
	</select>


	<select id="codeList" parameterType="map" resultType="map">
	
		SELECT * FROM ${tableName}
		WHERE active = 'Y' 
		ORDER BY ${orderName} ASC 
		LIMIT ${skip}, ${pageSize}

	</select>

	<select id="codeListTotal" parameterType="map" resultType="int">
	
	SELECT count(*) FROM
		(SELECT * FROM ${tableName}
		WHERE active = 'Y' 
		ORDER BY ${orderName} ASC)T
	
	</select>
	
	<select id="codeDuplChk" parameterType="map" resultType="int">
	
	SELECT count(*) FROM
		(SELECT * FROM ${tableName}
		WHERE active = 'Y' AND ${orderName} = ${chkName})T
	
	</select>
	
	<insert id="codeCCRegister" parameterType="map" useGeneratedKeys="true" keyProperty="cc_type_id">
	
		INSERT INTO ${tableName}
			(
				${orderName},
				create_emp_seq,
				create_date
			)
		VALUE
			(
				${registerName},
				${empSeq},
				NOW()
			)
		
	</insert>
	
	<insert id="codeRPRegister" parameterType="map" useGeneratedKeys="true" keyProperty="relationship_id">
	
		INSERT INTO ${tableName}
			(
				${orderName},
				create_emp_seq,
				create_date
			)
		VALUE
			(
				${registerName},
				${empSeq},
				NOW()
			)
		
	</insert>
	
	<update id="codeCCDelete" parameterType="map">
	
		UPDATE ${tableName}
			SET active = 'N'
			WHERE cc_type_id = ${primaryKey}
	
	</update>
	
	<update id="codeRPDelete" parameterType="map">
	
		UPDATE ${tableName}
			SET active = 'N'
			WHERE relationship_id = ${primaryKey}
	
	</update>
	
	<update id="codeSCHDelete" parameterType="map">
	
		UPDATE ${tableName}
			SET active = 'N'
			WHERE scholar_type_id = ${primaryKey}
	
	</update>
	
	<update id="codeCFDelete" parameterType="map">
	
		UPDATE ${tableName}
			SET active = 'N'
			WHERE classification_id = ${primaryKey}
	
	</update>
	
	<select id="ccDetailList" parameterType="map" resultType="map">
	
		SELECT A.*,  FORMAT(A.cc_money, 0) cc_money_format,
			(SELECT code_desc FROM common_code WHERE code = A.relationship_id AND group_code = 'FAMILY_TYPE')  AS relationship_name
		FROM dj_cc_register A
		WHERE A.cc_type_id = ${cc_type_id} AND A.active = 'Y'
		
	</select>
	
	<select id="ccDetailListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM
	
		(SELECT * 
		FROM dj_cc_register A
		WHERE A.cc_type_id = ${cc_type_id} AND A.active = 'Y')T
	
	</select>
	
	<select id="spDetailList" parameterType="map" resultType="map">
	
		SELECT A.*,  FORMAT(A.scholar_money, 0) scholar_money_format,
			(SELECT classification_name FROM dj_scholar_classification WHERE classification_id = A.classification_id) AS classification_name
		FROM dj_scholar_register A
		WHERE A.scholar_type_id = ${scholar_type_id} AND A.active = 'Y'
		
	</select>
	
	<select id="spDetailListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM
	
		(SELECT * 
		FROM dj_scholar_register A
		WHERE A.scholar_type_id = ${scholar_type_id} AND A.active = 'Y')T
	
	</select>
	
	
	<insert id="ccDetailRegister"  parameterType="map" useGeneratedKeys="true" keyProperty="cc_register_id">
		
		INSERT INTO dj_cc_register
		
		(
			relationship_id,
			cc_type_id,
			cc_money,
			vacation_date,
			create_emp_seq,
			create_date
		)
		VALUES
		(
			${relationship_id},
			${cc_type_id},
			${cc_money},
			${vacation_date},
			${empSeq},
			NOW()
		)
		
	</insert>
	
	<update id="ccDetailModify" parameterType="map">
	
		UPDATE dj_cc_register
			SET 
			cc_money = ${cc_money},
			vacation_date = ${vacation_date},
			update_emp_seq = ${empSeq},
			update_date = NOW()
			
			
			WHERE cc_register_id = ${primaryKey}
	
	</update>
	
	<update id="ccDetailDelete" parameterType="map">
	
		UPDATE dj_cc_register
			SET 
				active = 'N'
			WHERE cc_register_id = ${primaryKey}
	
	</update>
	
	<insert id="spDetailRegister"  parameterType="map" useGeneratedKeys="true" keyProperty="scholar_register_id">
		
		INSERT INTO dj_scholar_register
		
		(
			scholar_type_id,
			classification_id,
			scholar_money,
			create_emp_seq,
			create_date
		)
		VALUES
		(
			${scholar_type_id},
			${classification_id},
			${scholar_money},
			${empSeq},
			NOW()
		)
		
	</insert>
	
	<update id="spDetailModify" parameterType="map">
	
		UPDATE dj_scholar_register
			SET 
			scholar_money = ${scholar_money},
			update_emp_seq = ${empSeq},
			update_date = NOW()
			
			
			WHERE scholar_register_id = ${primaryKey}
	
	</update>
	
	<update id="spDetailDelete" parameterType="map">
	
		UPDATE dj_scholar_register
			SET 
				active = 'N'
			WHERE scholar_register_id = ${primaryKey}
	
	</update>
	
	
	<select id="ccApplyList" parameterType="map" resultType="map">
	
		SELECT A.*, 
		CASE B.doc_sts 
			WHEN '10' THEN '(진행중)임시저장'
			WHEN '20' THEN '상신중(기안완료)'
			WHEN '90' THEN '종결'
			WHEN '100' THEN '반려'
			WHEN '999' THEN '취소'
			ELSE '미상신'
		END AS status_name,		
		FORMAT(A.congratulation_condolence_money, 0) AS congratulation_condolence_money_format,
		DATE_FORMAT(request_date, '%Y-%m-%d') AS request_date_format,
		DATE_FORMAT(congratulation_condolence_date, '%Y-%m-%d') AS congratulation_condolence_date_format, 
		DATE_FORMAT(holiday_start_date, '%Y-%m-%d') AS holiday_start_date_format,
		DATE_FORMAT(holiday_end_date, '%Y-%m-%d') AS holiday_end_date_format,
		(SELECT code_desc FROM common_code WHERE code = a.target_relationship AND group_code = 'FAMILY_TYPE') AS target_relationship_name
		FROM dj_congratulation_condolence A LEFT JOIN dj_out_process B ON A.congratulation_condolence_id = SUBSTR(B.appro_key,6) AND SUBSTR(B.appro_key,1,1) = 'C'
		WHERE 
		active = 'Y' AND
		<if test="request_emp_seq != null and request_emp_seq != ''">
				request_emp_seq = #{request_emp_seq} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if> 
		
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if>  
		DATE_FORMAT(request_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY request_date ASC 
		LIMIT ${skip}, ${pageSize}

	</select>

	<select id="ccApplyListTotal" parameterType="map" resultType="int">
	
	SELECT count(*) FROM
		(SELECT * FROM dj_congratulation_condolence
		WHERE 
		active = 'Y' AND 
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if>  
		DATE_FORMAT(request_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY request_date ASC)T
	
	</select>
	
	<insert id="ccApplySaveInsert" parameterType="map" useGeneratedKeys="true" keyProperty="congratulation_condolence_id">
	
	INSERT INTO dj_congratulation_condolence
	(
		request_emp_seq,
		request_emp_name, 
		request_emp_no, 
		request_dept_seq, 
		request_dept_name,
		request_duty,
		request_duty_code, 
		request_date, 
		congratulation_condolence_date, 
		congratulation_condolence_money, 
		congratulation_condolence_code, 
		congratulation_condolence_name, 
		holiday_start_date, 
		holiday_end_date, 
		number_of_holidays, 
		target_name, 
		target_relationship, 
		remark,
		create_emp_seq, 
		create_date
		
	)
	VALUES
	(
		#{request_emp_seq},
		#{request_emp_name},
		#{request_emp_no},
		#{request_dept_seq},
		#{request_dept_name},
		#{request_duty},
		#{request_duty_code},
		#{request_date},
		#{congratulation_condolence_date},
		#{congratulation_condolence_money},
		#{congratulation_condolence_code},
		#{congratulation_condolence_name},
		#{holiday_start_date},
		#{holiday_end_date},
		#{number_of_holidays},
		#{target_name},
		#{target_relationship},
		#{remark},
		#{create_emp_seq},
		NOW()
	)
	
	</insert>
	
	
	<update id="ccApplySaveUpdate" parameterType="map">
	
		UPDATE dj_congratulation_condolence
			SET 
					request_emp_seq = #{request_emp_seq},
					request_emp_name = #{request_emp_name}, 
					request_emp_no = #{request_emp_no}, 
					request_dept_seq = #{request_dept_seq}, 
					request_dept_name = #{request_dept_name}, 
					request_duty = #{request_duty}, 
					request_duty_code = #{request_duty_code}, 
					request_date = #{request_date}, 
					congratulation_condolence_date = #{congratulation_condolence_date}, 
					congratulation_condolence_money = #{congratulation_condolence_money}, 
					congratulation_condolence_code = #{congratulation_condolence_code}, 
					congratulation_condolence_name = #{congratulation_condolence_name}, 
					holiday_start_date = #{holiday_start_date}, 
					holiday_end_date = #{holiday_end_date}, 
					number_of_holidays = #{number_of_holidays}, 
					target_name = #{target_name}, 
					target_relationship = #{target_relationship}, 
					remark = #{remark},
					update_emp_seq = #{create_emp_seq}, 
					update_date = NOW()
			WHERE congratulation_condolence_id = #{congratulation_condolence_id}
	
	</update>
	
	<update id="ccApplyDeleteRow" parameterType="map">
	
		UPDATE dj_congratulation_condolence
			SET 
				active = 'N'
			WHERE congratulation_condolence_id = #{congratulation_condolence_id}
	
	</update>
	
	<select id="scholarApplyList" parameterType="map" resultType="map">
	
		SELECT A.*,
		CASE A.status 
			WHEN '1' THEN '신청'
			WHEN '2' THEN '승인'
			WHEN '4' THEN '저장'
			ELSE '신청'
		END AS status_name,		
		FORMAT(A.education_sum_money, 0) AS education_sum_money_format,
		DATE_FORMAT(target_birth, '%Y-%m-%d') AS target_birth_format,
		DATE_FORMAT(request_date, '%Y-%m-%d') AS request_date_format,
		(SELECT code_desc FROM common_code WHERE code = a.target_relationship AND group_code = 'FAMILY_TYPE') AS target_relationship_name,
		(select group_concat(attach_file_id) from dj_attach_file where target_id = A.education_expense_id and target_table_name = 'scholar_file_attach') as attach_file_id
		FROM dj_education_expense A
		
		WHERE 
		A.active = 'Y' AND
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if> 
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>  
		<if test="education_expense_id != null and education_expense_id != ''">
				education_expense_id = #{education_expense_id} AND 
		</if>  
		DATE_FORMAT(request_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY FIELD(status, '1') DESC, request_date ASC 
		LIMIT ${skip}, ${pageSize}

	</select>

	<select id="scholarApplyListTotal" parameterType="map" resultType="int">
	
	SELECT count(*) FROM
		(SELECT * FROM dj_education_expense
		WHERE 
		active = 'Y' AND 
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if>
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>
		<if test="education_expense_id != null and education_expense_id != ''">
				education_expense_id = #{education_expense_id} AND 
		</if>      
		DATE_FORMAT(request_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY request_date ASC)T
	
	</select>
	
	<select id="scholarApplyDetailList" parameterType="map" resultType="map">
	
	SELECT *, FORMAT(A.money, 0) money_format
		
	FROM dj_education_expense_detail A
	WHERE education_expense_id = ${education_expense_id} AND active = 'Y'
	ORDER BY education_expense_detail_id ASC
	</select>
	
	<select id="scholarDetailList" parameterType="map" resultType="map">
		SELECT *,
			FORMAT(A.scholar_money, 0) scholar_money_format,
			(SELECT classification_name FROM dj_scholar_classification WHERE classification_id = A.classification_id) AS classification_name
		FROM dj_scholar_register A where active = 'Y'
	</select>

	<insert id="scholarApplySaveInsert" useGeneratedKeys="true" keyProperty="education_expense_id">
		
		INSERT INTO dj_education_expense
		
		(
			request_emp_seq, 
			request_emp_name, 
			request_emp_no, 
			request_dept_seq, 
			request_dept_name,
			request_duty, 
			request_duty_code,  
			request_date, 
			education_type_code, 
			education_type_name,
			scholarship_kind, 
			target_name,
			target_birth, 
			target_relationship, 
			education_institution, 
			education_sum_money, 
			education_term, 
			education_grade, 
			remark,
			status, 
			create_emp_seq, 
			create_date
		)
		VALUES
		
		(
			#{request_emp_seq},
			#{request_emp_name},
			#{request_emp_no},
			#{request_dept_seq},
			#{request_dept_name},
			#{request_duty},
			#{request_duty_code},
			#{request_date},
			#{education_type_code},
			#{education_type_name},
			#{scholarship_kind},
			#{target_name},
			#{target_birth},
			#{target_relationship},
			#{education_institution},
			#{education_sum_money},
			#{education_term},
			#{education_grade},
			#{remark},
			#{appro_status},
			#{create_emp_seq},
			NOW()
		)
		
	</insert>

	<insert id="scholarApplyDetailSave" useGeneratedKeys="true" keyProperty="education_expense_detail_id">
	
		INSERT INTO dj_education_expense_detail
		
		(
			education_expense_id, 
			education_detail_type_code, 
			education_detail_type_name, 
			money, 
			remark, 
			create_emp_seq, 
			create_date
		)
		
		VALUES
		
		(
			#{education_expense_id},
			#{education_detail_type_code},
			#{education_detail_type_name},
			#{money},
			#{remark},
			#{create_emp_seq},
			NOW()
		)
	
	</insert>

	<update id="scholarApplyUpdate" parameterType="map">
	
		UPDATE 
			dj_education_expense
		SET
<!-- 			request_emp_seq = #{request_emp_seq},  -->
<!-- 			request_emp_name = #{request_emp_name},  -->
<!-- 			request_emp_no = #{request_emp_no},  -->
<!-- 			request_dept_seq = #{request_dept_seq},  -->
<!-- 			request_dept_name = #{request_dept_name},  -->
<!-- 			request_duty = #{request_duty}, -->
<!-- 			request_duty_code = #{request_duty_code},  -->
<!-- 			request_date = #{request_date},   -->
<!-- 			education_type_code = #{education_type_code},  -->
<!-- 			education_type_name = #{education_type_name},  -->
<!-- 			target_name = #{target_name},  -->
<!-- 			scholarship_kind = #{scholarship_kind}, -->
<!-- 			target_relationship = #{target_relationship},  -->
<!-- 			education_institution = #{education_institution},  -->
<!-- 			education_sum_money = #{education_sum_money},  -->
<!-- 			education_term = #{education_term},  -->
<!-- 			education_grade = #{education_grade},  -->
<!-- 			remark = #{remark}, -->
			status = #{appro_status}, 
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE education_expense_id = #{education_expense_id}
	
	</update>
	
	<update id="scholarApplyDetailUpdate" parameterType="map">
	
		UPDATE
			dj_education_expense_detail
		SET
			active = 'N'
		WHERE
			education_expense_id = #{education_expense_id}
	</update>
	
	<update id="scholarApplyDeleteRow" parameterType="map">
	
		UPDATE dj_education_expense
			SET 
				active = 'N'
			WHERE education_expense_id = #{education_expense_id}
	
	</update>
		
	<update id="scholarApprovalUpdate" parameterType="map">
	
		UPDATE dj_education_expense
			SET 
					status = 2,
					scholarship_account = #{scholarship_account},
					update_emp_seq = #{update_emp_seq}, 
					update_date = NOW()
			WHERE education_expense_id = #{education_expense_id}
	
	</update>
	
	<update id="scholarApprovalCancle" parameterType="map">
	
		UPDATE dj_education_expense
			SET 
					status = 1,
					scholarship_account = '',
					update_emp_seq = #{update_emp_seq}, 
					update_date = NOW()
			WHERE education_expense_id = #{education_expense_id}
	
	</update>
	
	
	<update id="scholarApplyDeleteDetail" parameterType="map">
	
		UPDATE dj_education_expense_detail
			SET 
				active = 'N'
			WHERE education_expense_id = #{education_expense_id}
	
	</update>
	
	<select id="getClubListOperated" parameterType="map" resultType="map">
	
		SELECT A.*, B.status AS member_status, B.club_member_seq, B.club_detail_id, 
			CASE C.doc_sts 
				WHEN '10' THEN '(진행중)임시저장'
				WHEN '20' THEN '상신중(기안완료)'
				WHEN '90' THEN '종결'
				WHEN '100' THEN '반려'
				WHEN '999' THEN '취소'
				ELSE '미상신'
				END AS status_name,
			CASE D.doc_sts 
				WHEN '10' THEN '(진행중)임시저장'
				WHEN '20' THEN '참가상신중(기안완료)'
				WHEN '90' THEN '참가종결'
				WHEN '100' THEN '참가반려'
				WHEN '999' THEN '참가취소'
				ELSE '미상신'
				END AS cbj_status_name,
			CASE E.doc_sts 
				WHEN '10' THEN '(진행중)임시저장'
				WHEN '20' THEN '탈퇴상신중(기안완료)'
				WHEN '90' THEN '탈퇴종결'
				WHEN '100' THEN '탈퇴반려'
				WHEN '999' THEN '탈퇴취소'
				ELSE '미상신'
				END AS cbd_status_name
		FROM 
		dj_club_main A 
		LEFT JOIN dj_club_detail B ON A.club_id = B.club_id AND B.club_member_seq = #{emp_seq} AND B.active = 'Y'
		LEFT JOIN dj_out_process C ON A.club_id = SUBSTR(C.appro_key,7) AND SUBSTR(C.appro_key,1,2) = 'CB'
		LEFT JOIN dj_out_process D ON B.club_detail_id = SUBSTR(D.appro_key,8) AND SUBSTR(D.appro_key,1,3) = 'CBJ' AND D.doc_sts is not null
		LEFT JOIN dj_out_process E ON B.club_detail_id = SUBSTR(E.appro_key,8) AND SUBSTR(E.appro_key,1,3) = 'CBD'
		WHERE A.status IN (${status}) AND C.doc_sts is not null
		
		order by A.club_name
	
	</select>
	
	<select id="getClubListOperatedTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM (
		SELECT A.*, B.status AS member_status FROM 
		dj_club_main A LEFT JOIN dj_club_detail B ON A.club_id = B.club_id AND B.club_member_seq = #{emp_seq} AND B.active = 'Y'
		LEFT JOIN dj_out_process C ON A.club_id = SUBSTR(C.appro_key,7) AND SUBSTR(C.appro_key,1,2) = 'CB'
		LEFT JOIN dj_out_process D ON B.club_detail_id = SUBSTR(D.appro_key,8) AND SUBSTR(D.appro_key,1,3) = 'CBJ' AND D.doc_sts is not null
		LEFT JOIN dj_out_process E ON B.club_detail_id = SUBSTR(E.appro_key,8) AND SUBSTR(E.appro_key,1,3) = 'CBD'
		
		WHERE A.status IN (${status}) AND C.doc_sts is not null
	) T
	
	</select>
	
	<select id="getClubMemberList" parameterType="map" resultType="map">
	
		SELECT  B.*,
			CASE D.doc_sts 
				WHEN '10' THEN '(진행중)임시저장'
				WHEN '20' THEN '참가상신중(기안완료)'
				WHEN '90' THEN '참가종결'
				WHEN '100' THEN '참가반려'
				WHEN '999' THEN '참가취소'
				ELSE '미상신'
				END AS cbj_status_name,
			CASE E.doc_sts 
				WHEN '10' THEN '(진행중)임시저장'
				WHEN '20' THEN '탈퇴상신중(기안완료)'
				WHEN '90' THEN '탈퇴종결'
				WHEN '100' THEN '탈퇴반려'
				WHEN '999' THEN '탈퇴취소'
				ELSE '미상신'
				END AS cbd_status_name
		FROM 
		dj_club_detail B
		LEFT JOIN dj_out_process D ON B.club_detail_id = SUBSTR(D.appro_key,8) AND SUBSTR(D.appro_key,1,3) = 'CBJ' AND D.doc_sts is not null
		LEFT JOIN dj_out_process E ON B.club_detail_id = SUBSTR(E.appro_key,8) AND SUBSTR(E.appro_key,1,3) = 'CBD' AND E.doc_sts is not null
		WHERE B.club_id = #{club_id} AND active = 'Y'
		
		order by B.club_id
	
	</select>
	
	<select id="getClubMemberListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM (
		SELECT  B.*
		FROM 
		dj_club_detail B
		LEFT JOIN dj_out_process D ON B.club_detail_id = SUBSTR(D.appro_key,8) AND SUBSTR(D.appro_key,1,3) = 'CBJ' AND D.doc_sts is not null
		LEFT JOIN dj_out_process E ON B.club_detail_id = SUBSTR(E.appro_key,8) AND SUBSTR(E.appro_key,1,3) = 'CBD' AND E.doc_sts is not null
		WHERE B.club_id = #{club_id}  AND active = 'Y'
	) T
	
	</select>


	<insert id="clubSaveInsert" parameterType="map" useGeneratedKeys="true" keyProperty="club_id">
	
	INSERT INTO dj_club_main
	(
		club_name,
		club_leader_seq, 
		club_leader_name, 
		contact_number, 
		club_establish_date,
		club_introduce, 
		club_meeting_day, 
		create_emp_seq, 
		create_date
		
	)
	VALUES
	(
		#{club_name},
		#{club_leader_seq},
		#{club_leader_name},
		#{contact_number},
		#{club_establish_date},
		#{club_introduce},
		#{club_meeting_day},
		#{create_emp_seq},
		NOW()
	)
	
	</insert>
	
	
	<update id="clubSaveUpdate" parameterType="map">
	
		UPDATE dj_club_main
			SET 
					club_name = #{club_name},
					club_leader_seq = #{club_leader_seq}, 
					club_leader_name = #{club_leader_name}, 
					contact_number = #{contact_number}, 
					club_establish_date = #{club_establish_date}, 
					club_introduce = #{club_introduce}, 
					club_meeting_day = #{club_meeting_day}, 
					update_emp_seq = #{create_emp_seq}, 
					update_date = NOW()
			WHERE club_id = #{club_id}
	
	</update>
	
	<select id="getMedicalSubsidyApplyList" parameterType="map" resultType="map">
	
		SELECT A.*
		, DATE_FORMAT(A.create_date, '%Y-%m-%d') AS apply_date
		, CONCAT(A.dong, '동 ', A.room_number, '호실(', A.room_size,'인실)') AS room
		, B.dept_name
		, C.attach_file_id
		, CONCAT(C.real_file_name, '.', C.file_extension) AS fileID1
		, (SELECT dp_name FROM neos.t_co_comp_duty_position_multi WHERE dp_type = 'POSITION' AND dp_seq = B.position_code AND use_yn = 'Y') AS position
		, (SELECT dp_name FROM neos.t_co_comp_duty_position_multi WHERE dp_type = 'DUTY' AND dp_seq = B.duty_code AND use_yn = 'Y') AS duty
		FROM 
		dj_medical_subsidy A 
		LEFT JOIN neos.v_user_info B ON A.apply_seq = B.emp_seq AND B.main_dept_yn = 'Y'
		LEFT JOIN dj_attach_file C ON A.medical_id = C.target_id AND C.target_table_name = 'medical_file_attach'
		<where>
			A.active = 'Y' AND
			DATE_FORMAT(A.create_date, '%Y%m%d') BETWEEN #{apply_from_date} AND #{apply_to_date}
		
			<if test="apply_seq != null and apply_seq != ''">
				AND A.apply_seq = ${apply_seq}
			</if>

			<if test="apply_name != null and apply_name != ''">
				AND A.apply_name LIKE CONCAT ('%',#{apply_name},'%')
			</if>

			<if test="status != null and status != ''">
				AND A.status = #{status}
			</if>

		</where>

		order by A.status, A.create_date desc

		LIMIT ${skip} , ${pageSize}
	</select>
	
	<select id="getMedicalSubsidyApplyListTotal" parameterType="map" resultType="int">
	
		SELECT COUNT(*) FROM (
			SELECT A.*
			, DATE_FORMAT(A.create_date, '%Y-%m-%d') AS apply_date
			, B.dept_name
			, (SELECT dp_name FROM neos.t_co_comp_duty_position_multi WHERE dp_type = 'POSITION' AND dp_seq = B.position_code AND use_yn = 'Y') AS position
			, (SELECT dp_name FROM neos.t_co_comp_duty_position_multi WHERE dp_type = 'DUTY' AND dp_seq = B.duty_code AND use_yn = 'Y') AS duty
			FROM 
			dj_medical_subsidy A 
			LEFT JOIN neos.v_user_info B ON A.apply_seq = B.emp_seq AND B.main_dept_yn = 'Y'
			LEFT JOIN dj_attach_file C ON A.medical_id = C.target_id AND C.target_table_name = 'medical_file_attach'
			<where>
				A.active = 'Y' AND
				DATE_FORMAT(A.create_date, '%Y%m%d') BETWEEN #{apply_from_date} AND #{apply_to_date}
			
				<if test="apply_seq != null and apply_seq != ''">
					AND A.apply_seq = ${apply_seq}
				</if>
	
				<if test="apply_name != null and apply_name != ''">
					AND A.apply_name LIKE CONCAT ('%',#{apply_name},'%')
				</if>
	
				<if test="status != null and status != ''">
					AND A.status = #{status}
				</if>
	
			</where>
		)T

	
	</select>
	
	
	<insert id="medicalSubsidyApplyInsert" parameterType="map" useGeneratedKeys="true" keyProperty="medical_id">
		INSERT INTO dj_medical_subsidy (
				apply_seq
				, apply_name
				, patient_name
				, relationship
				, relationship_name
				, treat_start_date
				, treat_end_date
				, disease_name
				, disease_code
				, institution
				, tel_num
				, address
				, dong
				, room_number
				, room_size
				, total_account
				, reason
				, pre_subsidy_yn
				, pre_subsidy_date
				, pre_subsidy_disease
				, status
				, create_emp_seq
				, create_date
			) VALUES
			(
				#{apply_seq}
			  , #{apply_name}
			  , #{patient_name}
			  , #{relationship}
			  , #{relationship_name}
			  , #{treat_start_date}
			  , #{treat_end_date}
			  , #{disease_name}
			  , #{disease_code}
			  , #{institution}
			  , #{tel_num}
			  , #{address}
			  , #{dong}
			  , #{room_number}
			  , #{room_size}
			  , #{total_account}
			  , #{reason}
			  , #{pre_subsidy_yn}
			  , #{pre_subsidy_date}
			  , #{pre_subsidy_disease}
			  , '1'
			  , #{create_emp_seq}
			  , NOW()
			)
	</insert>

	<update id="medicalSubsidyApplyUpdate" parameterType="map">
	
		UPDATE dj_medical_subsidy
			SET 
					patient_name = #{patient_name},
					relationship = #{relationship}, 
					relationship_name = #{relationship_name}, 
					treat_start_date = #{treat_start_date}, 
					treat_end_date = #{treat_end_date}, 
					disease_name = #{disease_name},
					disease_code = #{disease_code}, 
					institution = #{institution},
					tel_num = #{tel_num},
					dong = #{dong},
					room_number = #{room_number},
					room_size = #{room_size},
					total_account = #{total_account},
					reason = #{reason},
					pre_subsidy_yn = #{pre_subsidy_yn},
					pre_subsidy_date = #{pre_subsidy_date},
					pre_subsidy_disease = #{pre_subsidy_disease},
					update_emp_seq = #{create_emp_seq}, 
					update_date = NOW()
			WHERE medical_id = #{medical_id}
	
	</update>
	
	<update id="medicalSubsidyDeleteRow" parameterType="map">
	
		UPDATE dj_medical_subsidy
			SET 
				active = 'N'
			WHERE medical_id = #{medical_id}
	
	</update>


	<insert id="fileUploadSave" parameterType="map" useGeneratedKeys="true" keyProperty="attach_file_id">
		INSERT INTO dj_attach_file (
				target_table_name
			  , target_id
			  , file_seq
			) VALUES
			(
				#{target_table_name}
			  , #{target_id}
			  , #{file_seq}
			)
	</insert>
	
	<update id="fileUploadActiveUpdate" parameterType="map">
		UPDATE dj_attach_file 
		SET 
			active = 'N'
		WHERE target_id = #{target_id} AND target_table_name = 'medical_file_attach'
	</update>
	
	<update id="fileUpload" parameterType="map">
		UPDATE dj_attach_file 
		SET 
			file_name = #{attach_file_id}
	      , real_file_name = #{real_file_name}		
		  , file_extension = #{file_extension}
		  , file_path = #{file_path}
		  , file_size = #{file_size}
		WHERE attach_file_id = #{attach_file_id}
	</update>

	<update id="medicalApprovalUpdate" parameterType="map">
	
		UPDATE dj_medical_subsidy
			SET 
					status = 2,
					total_subsidy_account = #{total_subsidy_account},
					update_emp_seq = #{update_emp_seq}, 
					update_date = NOW()
			WHERE medical_id = #{medical_id}
	
	</update>

	<insert id="clubDetailSaveInsert" parameterType="map" useGeneratedKeys="true" keyProperty="club_detail_id">
	
	INSERT INTO dj_club_detail
	(
		club_id,
		club_member_seq, 
		club_member_name, 
		club_participation_date, 
		status,
		create_emp_seq, 
		create_date
		
	)
	VALUES
	(
		#{club_id},
		#{club_member_seq},
		#{club_member_name},
		DATE_FORMAT(NOW(), '%Y-%m-%d'),
		'1',
		#{create_emp_seq},
		NOW()
	)
	
	</insert>
	
	<update id="updateClubMainStatus" parameterType="map">
	
		SELECT CUST_SMBS.fn_clubApprovalSet(#{club_id}, #{userId})
	
	</update>
	
	<update id="updateClubDetailStatus" parameterType="map">
	
		UPDATE dj_club_detail SET
			status = #{member_status}
			, active = #{active}
			, update_emp_seq = (select emp_seq from neos.v_user_info where login_id = #{userId} AND main_comp_yn = 'Y')
			, update_date = NOW()
		WHERE club_detail_id = #{club_detail_id}
	
	</update>
	
	<update id="memberCountChange"  parameterType="map">
	
	UPDATE dj_club_main SET 
		club_member_num = (SELECT COUNT(STATUS = '2') FROM DJ_CLUB_DETAIL WHERE CLUB_ID = (SELECT CLUB_ID FROM DJ_CLUB_DETAIL WHERE CLUB_DETAIL_ID = #{club_detail_id}) AND status = '2')
	WHERE club_id = (SELECT CLUB_ID FROM DJ_CLUB_DETAIL WHERE CLUB_DETAIL_ID = #{club_detail_id})
	</update>


	<update id="medicalApprovalCancle" parameterType="map">
	
		UPDATE dj_medical_subsidy
			SET 
					status = 1,
					total_subsidy_account = '',
					update_emp_seq = #{update_emp_seq}, 
					update_date = NOW()
			WHERE medical_id = #{medical_id}
	
	</update>

	<select id="famliyApplyList" parameterType="map" resultType="map">
	
		SELECT A.*,
		CASE A.status
			WHEN '4' THEN '저장' 
			WHEN '1' THEN '신청'
			WHEN '2' THEN '승인'
			WHEN '3' THEN '반려'
			ELSE '신청'
		END AS status_name,		
		DATE_FORMAT(apply_date, '%Y-%m-%d') AS apply_date_format,
		DATE_FORMAT(request_start_date, '%Y-%m-%d') AS request_start_date_format,
		DATE_FORMAT(request_end_date, '%Y-%m-%d') AS request_end_date_format,
		(select group_concat(attach_file_id) from dj_attach_file where target_id = A.family_apply_id and target_table_name = 'family_file_attach') as attach_file_id
		FROM dj_famliy_apply A
		WHERE 
		A.active = 'Y' AND
		<if test="request_emp_seq != null and request_emp_seq != ''">
				request_emp_seq = #{request_emp_seq} AND 
		</if>
		
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if> 
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>
		<if test="family_apply_id != null and family_apply_id != ''">
				family_apply_id = #{family_apply_id} AND 
		</if>   
		DATE_FORMAT(apply_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY FIELD(status, '1') DESC, apply_date ASC 
		LIMIT ${skip}, ${pageSize}

	</select>
	
	<select id="famliyApplyListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM (
		SELECT A.*
		FROM dj_famliy_apply A
		WHERE 
		A.active = 'Y' AND
		
		<if test="request_emp_seq != null and request_emp_seq != ''">
				request_emp_seq = #{request_emp_seq} AND 
		</if>
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if> 
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>
		<if test="family_apply_id != null and family_apply_id != ''">
				family_apply_id = #{family_apply_id} AND 
		</if>     
		DATE_FORMAT(apply_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
	)T

	</select>
	
	<insert id="famliyApplySaveInsert" useGeneratedKeys="true" keyProperty="family_apply_id">
		
		INSERT INTO dj_famliy_apply
		
		(
			request_emp_seq, 
			request_emp_name, 
			request_emp_no, 
			request_dept_seq, 
			request_dept_name,
			request_position, 
			request_position_code,
			apply_type,
			status, 
			address,  
			apply_date,
			request_start_date,
			request_end_date, 
			residence_number,
			apply_family_name,
			apply_family_number,
			remark, 
			create_emp_seq, 
			create_date
		)
		VALUES
		
		(
			#{request_emp_seq},
			#{request_emp_name},
			#{request_emp_no},
			#{request_dept_seq},
			#{request_dept_name},
			#{request_position},
			#{request_position_code},
			#{apply_type},
			#{appro_status},
			#{address},
			#{apply_date},
			#{request_start_date},
			#{request_end_date},
			#{residence_number},
			#{apply_family_name},
			#{apply_family_number},
			#{remark},
			#{create_emp_seq},
			NOW()
		)
		
	</insert>
	<update id="familyApplyUpdate" parameterType="map">
	
		UPDATE 
			dj_famliy_apply
		SET
<!-- 			request_emp_seq = #{request_emp_seq},  -->
<!-- 			request_emp_name = #{request_emp_name},  -->
<!-- 			request_emp_no = #{request_emp_no},  -->
<!-- 			request_dept_seq = #{request_dept_seq},  -->
<!-- 			request_dept_name = #{request_dept_name},  -->
<!-- 			request_position = #{request_position}, -->
<!-- 			request_position_code = #{request_position_code},  -->
<!-- 			apply_date = #{apply_date}, -->
<!-- 			address = #{address}, -->
<!-- 			request_date = #{request_date},   -->
<!-- 			residence_number = #{residence_number},  -->
<!-- 			remark = #{remark},  -->
			status = #{appro_status},
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE family_apply_id = #{family_apply_id}
	
	</update>
	
	<insert id="familyApplyDetailSave" useGeneratedKeys="true" keyProperty="user_family_id">
	
		INSERT INTO dj_user_family_info
		
		(
			family_apply_id, 
			emp_seq, 
			family_name, 
			family_relationship, 
			family_birth, 
			family_address, 
			remark, 
			create_emp_seq, 
			create_date
		)
		
		VALUES
		
		(
			#{family_apply_id},
			#{emp_seq},
			#{family_name},
			#{family_relationship},
			#{family_birth},
			#{family_address},
			#{remark},
			#{create_emp_seq},
			NOW()
		)
	
	</insert>
	
	<select id="familyApplyDetailList" parameterType="map" resultType="map">
	
		SELECT A.*,
			(SELECT DATE_FORMAT(request_start_date, '%Y-%m-%d') FROM dj_famliy_apply WHERE A.family_apply_id = family_apply_id) as request_start_date,
			(SELECT DATE_FORMAT(request_end_date, '%Y-%m-%d') FROM dj_famliy_apply WHERE A.family_apply_id = family_apply_id) as request_end_date
			
		 FROM dj_user_family_info A
		
			WHERE A.active = 'Y'
		<if test="emp_seq != null and emp_seq != ''">
				AND A.emp_seq = #{emp_seq} 
		</if>
		<if test="family_apply_id != null and family_apply_id != ''">
				AND A.family_apply_id = #{family_apply_id} 
		</if>
		
		<if test="lose_family_apply_id != null and lose_family_apply_id != ''">
				AND A.lose_family_apply_id = #{lose_family_apply_id} 
		</if>
		
		<if test="status != null and status != ''">
				AND A.status IN  
				<foreach collection="status" item="list" index="index"  open="(" close=")" separator=",">
		             #{list}
		        </foreach>
		</if>
		<if test="apply_from_date != null and apply_from_date != ''">
				AND DATE_FORMAT(A.create_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		</if>
		
		ORDER BY FIELD(status, '3', '2', '1', '0') DESC, family_name
	
	</select>
	
	<update id="familyApplyDeleteRow" parameterType="map">
	
		UPDATE dj_famliy_apply SET ACTIVE = 'N'
			WHERE family_apply_id = #{family_apply_id}
	
	</update>
	
	<update id="familyApplyDeleteDetail" parameterType="map">
	
		UPDATE dj_user_family_info SET ACTIVE = 'N'
			WHERE family_apply_id = #{family_apply_id}
	
	</update>
	
	<update id="familyDetailLoseApply" parameterType="map">
	
		UPDATE dj_user_family_info SET 
			status = '3',
			lose_family_apply_id = #{family_apply_id}
			WHERE user_family_id = #{user_family_id}
	
	</update>
	
	<update id="familyApplyApprovall" parameterType="map">
	
		UPDATE dj_famliy_apply SET
			request_start_date = #{request_start_date},
			status = #{mainStatus},
			doc_no = 
				(select * from(
		            SELECT 
			        CONCAT(DATE_FORMAT(NOW(), '%Y'), ' - ', CASE WHEN COUNT(1) = 0 THEN '1' ELSE MAX(cast(replace(SUBSTR(A.doc_no, 8),'호','') as unsigned))+1 END) AS doc_no
			        FROM dj_famliy_apply A WHERE ACTIVE = 'Y' AND DATE_FORMAT(A.UPDATE_DATE, '%Y') = DATE_FORMAT(NOW(), '%Y')
				) t),
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE family_apply_id = #{family_apply_id}
	
	</update>
	
	<update id="familyApplyDetailApproval" parameterType="map">
	
		UPDATE dj_user_family_info SET 
			status = #{detailStatus},
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE family_apply_id = #{family_apply_id}
	
	</update>
	
	<update id="familyLoseDetailApproval" parameterType="map">
	
		UPDATE dj_user_family_info SET 
			status = #{detailStatus},
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE lose_family_apply_id = #{family_apply_id}
	
	</update>

	<insert id="benefitSave" useGeneratedKeys="true" keyProperty="benefit_master_main_id">
		
		INSERT INTO dj_benefit_master_main
		
		(
			benefit_type, 
			apply_start_date, 
			apply_end_date, 
			subject, 
			create_emp_seq, 
			create_date
		)
		VALUES
		
		(
			#{benefit_type},
			#{apply_start_date},
			#{apply_end_date},
			#{subject},
			#{create_emp_seq},
			NOW()
		)
		
	</insert>
	
	<insert id="benefitDetailSave" useGeneratedKeys="true" keyProperty="benefit_master_detail_id">
		
		INSERT INTO dj_benefit_master_detail
		
		(
			benefit_master_main_id, 
			relationship_code, 
			relationship_name, 
			account, 
			number,
			create_emp_seq, 
			create_date
		)
		VALUES
		
		(
			#{benefit_master_main_id},
			#{relationship_code},
			#{relationship_name},
			#{account},
			#{number},
			#{create_emp_seq},
			NOW()
		)
		
	</insert>

	<update id="benefitUpdate" parameterType="map">
	
		UPDATE 
			dj_benefit_master_main
		SET
			benefit_type = #{benefit_type}, 
			apply_start_date = #{apply_start_date}, 
			apply_end_date = #{apply_end_date}, 
			subject = #{subject}, 
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE benefit_master_main_id = #{benefit_master_main_id}
	
	</update>
	
	<update id="benefitDetailUpdate" parameterType="map">
	
		UPDATE 
			dj_benefit_master_detail
		SET
			relationship_code = #{relationship_code}, 
			relationship_name = #{relationship_name}, 
			account = #{account}, 
			number = #{number},
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE benefit_master_detail_id = #{benefit_master_detail_id}
	
	</update>
	
	<update id="benefitDetailDelete" parameterType="map">
	
		UPDATE 
			dj_benefit_master_detail
		SET
			active = 'N', 
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE benefit_master_detail_id = #{benefit_master_detail_id}
	
	</update>
	
	<select id="benefitList" parameterType="map" resultType="map">
	
		SELECT A.*,	
		DATE_FORMAT(apply_start_date, '%Y-%m-%d') AS apply_start_date_format,
		DATE_FORMAT(apply_end_date, '%Y-%m-%d') AS apply_end_date_format
		FROM dj_benefit_master_main A
		WHERE 
		A.active = 'Y' AND

		<if test="benefit_type != null and benefit_type != ''">
				benefit_type = #{benefit_type} AND 
		</if>  
		DATE_FORMAT(apply_start_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY apply_start_date DESC, benefit_type ASC 
		LIMIT ${skip}, ${pageSize}

	</select>
	
	<select id="benefitListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM (
		SELECT A.*,	
		DATE_FORMAT(apply_start_date, '%Y-%m-%d') AS apply_start_date_format,
		DATE_FORMAT(apply_end_date, '%Y-%m-%d') AS apply_end_date_format
		FROM dj_benefit_master_main A
		WHERE 
		A.active = 'Y' AND

		<if test="benefit_type != null and benefit_type != ''">
				benefit_type = #{benefit_type} AND 
		</if>  
		DATE_FORMAT(apply_start_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		)T

	</select>
	
	
	<select id="benefitDetailList" parameterType="map" resultType="map">
	
		SELECT * FROM dj_benefit_master_detail
		
			WHERE active = 'Y' AND benefit_master_main_id = #{benefit_master_main_id}
		
		ORDER BY FIELD(relationship_code, '70', '50', '20') DESC, number
	
	</select>
	
	<select id="getBenefitTypeList" parameterType="map" resultType="map">
	
		${sql}
	
<!-- 		SELECT a.*,  -->
<!-- 		<![CDATA[  -->
<!-- 			   (CASE @emp WHEN a.emp_seq AND @payday=a.payday THEN @account:=@account+a.account ELSE @account:=account END) accumulate, -->
<!-- 			   (@emp:=a.emp_seq) emp, -->
<!--                (@payday:=a.payday) pay -->
<!-- 	    ]]> -->
<!-- 	    FROM dj_benefit_manage_batch a, (SELECT @emp:='', @payday:='', @account:=0 FROM DUAL) b -->
		
<!-- 		WHERE  -->
<!-- 			ACTIVE = 'Y' -->
<!-- 		<if test="benefit_type != null and benefit_type != ''"> -->
<!-- 				AND benefit_type = #{benefit_type}   -->
<!-- 		</if>   -->
<!-- 			AND payday BETWEEN ${apply_from_date} AND ${apply_to_date} -->
<!-- 		ORDER BY emp_name, payday, FIELD(relationship_code,'70', '20') DESC -->

	</select>
	
	<select id="getBenefitTypeListTotal" parameterType="map" resultType="int">
	
		SELECT COUNT(*) FROM (
		${sql}
<!-- 			SELECT a.*, -->
<!-- 			<![CDATA[   -->
<!-- 			   (CASE @emp WHEN a.emp_seq AND @payday=a.payday THEN @account:=@account+a.account ELSE @account:=account END) accumulate, -->
<!-- 			   (@emp:=a.emp_seq) emp, -->
<!--                (@payday:=a.payday) pay -->
<!-- 	   		 ]]> -->
<!-- 	   		 FROM dj_benefit_manage_batch a, (SELECT @emp:='', @payday:='', @account:=0 FROM DUAL) b -->
			
<!-- 			WHERE  -->
<!-- 				ACTIVE = 'Y' -->
<!-- 		<if test="benefit_type != null and benefit_type != ''"> -->
<!-- 				AND benefit_type = #{benefit_type}   -->
<!-- 		</if>   -->
<!-- 				AND payday BETWEEN ${apply_from_date} AND ${apply_to_date} -->
		) Q


	</select>
	
	<select id="benefitDeleteData" parameterType="map" resultType="map">
		SELECT CONCAT(payday,'01') as payday FROM dj_benefit_manage_batch
				WHERE active = 'Y' 
				AND emp_seq = #{emp_seq} 
				AND payday BETWEEN DATE_FORMAT(#{request_start_date},'%Y%m') and date_format(NOW(),'%Y%m')
			GROUP BY payday
	</select>
	
	<update id="benefitPreDataDelete" parameterType="map">
		
		UPDATE dj_benefit_manage_batch SET 
			active = 'N',
			update_emp_seq = #{update_emp_seq}, 
			update_date = NOW()
		WHERE active = 'Y' 
			AND emp_seq = #{emp_seq} 
			AND payday BETWEEN DATE_FORMAT(#{request_start_date},'%Y%m') and date_format(NOW(),'%Y%m')
	</update>
	
	<update id="benefitRebatch" parameterType="map">
	
		CALL SP_DJ_BENEFIT_PERSONAL_REBATCH(#{payday}, #{benefit_type}, #{emp_seq})
	
	</update>
	
	<update id="welrfareBenefitRebatch" parameterType="map">
	
		CALL SP_DJ_WELFARE_BENEFIT_PERSONAL_REBATCH(#{payday}, #{benefit_type}, #{emp_seq})
	
	</update>
	
	<select id="getScholarshipManageList" parameterType="map" resultType="map">
	
		${sql}
		<!-- 		ORDER BY emp_name, payday, FIELD(relationship_code,'70', '20') DESC -->

	</select>
	
	<select id="getScholarshipManageListTotal" parameterType="map" resultType="int">
	
		SELECT COUNT(*) FROM (
			${sql}
		) Q

	</select>

	<select id="welfareApplyList" parameterType="map" resultType="map">
	
		SELECT A.*,
		CASE A.status
			WHEN '4' THEN '저장' 
			WHEN '1' THEN '신청'
			WHEN '2' THEN '승인'
			WHEN '3' THEN '반려'
			ELSE '신청'
		END AS status_name,		
		DATE_FORMAT(apply_date, '%Y-%m-%d') AS apply_date_format,
		DATE_FORMAT(request_start_date, '%Y-%m-%d') AS request_start_date_format,
		DATE_FORMAT(request_end_date, '%Y-%m-%d') AS request_end_date_format,
		(select group_concat(attach_file_id) from dj_attach_file where target_id = A.welfare_apply_id and target_table_name = 'welfare_file_attach') as attach_file_id
		FROM dj_welfare_apply A
		WHERE 
		A.active = 'Y' AND
		<if test="request_emp_seq != null and request_emp_seq != ''">
				request_emp_seq = #{request_emp_seq} AND 
		</if>
		
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if> 
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>
		<if test="welfare_apply_id != null and welfare_apply_id != ''">
				welfare_apply_id = #{welfare_apply_id} AND 
		</if>   
		DATE_FORMAT(apply_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		ORDER BY FIELD(status, '1') DESC, apply_date ASC 
		LIMIT ${skip}, ${pageSize}

	</select>
	
	<select id="welfareApplyListTotal" parameterType="map" resultType="int">
	
	SELECT COUNT(*) FROM (
		SELECT A.*
		FROM dj_welfare_apply A
		WHERE 
		A.active = 'Y' AND
		
		<if test="request_emp_seq != null and request_emp_seq != ''">
				request_emp_seq = #{request_emp_seq} AND 
		</if>
		<if test="request_emp_no != null and request_emp_no != ''">
				request_emp_no = #{request_emp_no} AND 
		</if>
		<if test="request_emp_name != null and request_emp_name != ''">
				request_emp_name = #{request_emp_name} AND 
		</if> 
		<if test="request_dept_seq != null and request_dept_seq != ''">
				request_dept_seq = #{request_dept_seq} AND 
		</if> 
		<if test="status != null and status != ''">
				status = #{status} AND 
		</if>
		<if test="welfare_apply_id != null and welfare_apply_id != ''">
				welfare_apply_id = #{welfare_apply_id} AND 
		</if>     
		DATE_FORMAT(apply_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
	)T

	</select>
	
	<insert id="welfareApplySaveInsert" useGeneratedKeys="true" keyProperty="welfare_apply_id">
		
		INSERT INTO dj_welfare_apply
		
		(
			request_emp_seq, 
			request_emp_name, 
			request_emp_no, 
			request_dept_seq, 
			request_dept_name,
			request_position, 
			request_position_code,
			apply_type,
			status, 
			address,  
			apply_date,
			request_start_date,
			request_end_date, 
			residence_number,
			apply_family_name,
			apply_family_number,
			remark, 
			create_emp_seq, 
			create_date
		)
		VALUES
		
		(
			#{request_emp_seq},
			#{request_emp_name},
			#{request_emp_no},
			#{request_dept_seq},
			#{request_dept_name},
			#{request_position},
			#{request_position_code},
			#{apply_type},
			#{appro_status},
			#{address},
			#{apply_date},
			#{request_start_date},
			#{request_end_date},
			#{residence_number},
			#{apply_family_name},
			#{apply_family_number},
			#{remark},
			#{create_emp_seq},
			NOW()
		)
		
	</insert>
	<update id="welfareApplyUpdate" parameterType="map">
	
		UPDATE 
			dj_welfare_apply
		SET
<!-- 			request_emp_seq = #{request_emp_seq},  -->
<!-- 			request_emp_name = #{request_emp_name},  -->
<!-- 			request_emp_no = #{request_emp_no},  -->
<!-- 			request_dept_seq = #{request_dept_seq},  -->
<!-- 			request_dept_name = #{request_dept_name},  -->
<!-- 			request_position = #{request_position}, -->
<!-- 			request_position_code = #{request_position_code},  -->
<!-- 			apply_date = #{apply_date}, -->
<!-- 			address = #{address}, -->
<!-- 			request_date = #{request_date},   -->
<!-- 			residence_number = #{residence_number},  -->
<!-- 			remark = #{remark},  -->
			status = #{appro_status},
			update_emp_seq = #{create_emp_seq}, 
			update_date = NOW()
		
		WHERE welfare_apply_id = #{welfare_apply_id}
	
	</update>
	
	<insert id="welfareApplyDetailSave" useGeneratedKeys="true" keyProperty="user_welfare_id">
	
		INSERT INTO dj_welfare_famliy_info
		
		(
			welfare_apply_id, 
			emp_seq, 
			family_name, 
			family_relationship, 
			family_birth, 
			family_address, 
			remark, 
			create_emp_seq, 
			create_date
		)
		
		VALUES
		
		(
			#{welfare_apply_id},
			#{emp_seq},
			#{family_name},
			#{family_relationship},
			#{family_birth},
			#{family_address},
			#{remark},
			#{create_emp_seq},
			NOW()
		)
	
	</insert>
	
	<select id="welfareApplyDetailList" parameterType="map" resultType="map">
	
		SELECT A.*,
			(SELECT DATE_FORMAT(request_start_date, '%Y-%m-%d') FROM dj_welfare_apply WHERE A.welfare_apply_id = welfare_apply_id) as request_start_date,
			(SELECT DATE_FORMAT(request_end_date, '%Y-%m-%d') FROM dj_welfare_apply WHERE A.welfare_apply_id = welfare_apply_id) as request_end_date
			
		 FROM dj_welfare_famliy_info A
		
			WHERE A.active = 'Y'
		<if test="emp_seq != null and emp_seq != ''">
				AND A.emp_seq = #{emp_seq} 
		</if>
		<if test="welfare_apply_id != null and welfare_apply_id != ''">
				AND A.welfare_apply_id = #{welfare_apply_id} 
		</if>
		
		<if test="lose_welfare_apply_id != null and lose_welfare_apply_id != ''">
				AND A.lose_welfare_apply_id = #{lose_welfare_apply_id} 
		</if>
		
		<if test="status != null and status != ''">
				AND A.status IN  
				<foreach collection="status" item="list" index="index"  open="(" close=")" separator=",">
		             #{list}
		        </foreach>
		</if>
		<if test="apply_from_date != null and apply_from_date != ''">
				AND DATE_FORMAT(A.create_date, '%Y%m%d') BETWEEN ${apply_from_date} AND ${apply_to_date}
		</if>
		
		ORDER BY FIELD(status, '3', '2', '1', '0') DESC, family_name
	
	</select>
	
	<update id="welfareApplyDeleteRow" parameterType="map">
	
		UPDATE dj_welfare_apply SET ACTIVE = 'N'
			WHERE welfare_apply_id = #{welfare_apply_id}
	
	</update>
	
	<update id="welfareApplyDeleteDetail" parameterType="map">
	
		UPDATE dj_welfare_famliy_info SET ACTIVE = 'N'
			WHERE welfare_apply_id = #{welfare_apply_id}
	
	</update>
	
	<update id="welfareDetailLoseApply" parameterType="map">
	
		UPDATE dj_welfare_famliy_info SET 
			status = '3',
			lose_welfare_apply_id = #{welfare_apply_id}
			WHERE user_welfare_id = #{user_welfare_id}
	
	</update>
	
	<update id="welfareApplyApprovall" parameterType="map">
	
		UPDATE dj_welfare_apply SET
			request_start_date = #{request_start_date},
			status = #{mainStatus},
			doc_no = 
				(select * from(
		            SELECT 
			        CONCAT(DATE_FORMAT(NOW(), '%Y'), ' - ', CASE WHEN COUNT(1) = 0 THEN '1' ELSE MAX(cast(replace(SUBSTR(A.doc_no, 8),'호','') as unsigned))+1 END) AS doc_no
			        FROM dj_welfare_apply A WHERE ACTIVE = 'Y' AND DATE_FORMAT(A.UPDATE_DATE, '%Y') = DATE_FORMAT(NOW(), '%Y')
				) t),
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE welfare_apply_id = #{welfare_apply_id}
	
	</update>
	
	<update id="welfareApplyDetailApproval" parameterType="map">
	
		UPDATE dj_welfare_famliy_info SET 
			status = #{detailStatus},
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE welfare_apply_id = #{welfare_apply_id}
	
	</update>
	
	<update id="welfareLoseDetailApproval" parameterType="map">
	
		UPDATE dj_welfare_famliy_info SET 
			status = #{detailStatus},
			update_emp_seq = #{update_emp_seq},
			update_date = NOW()
			WHERE lose_welfare_apply_id = #{lose_welfare_apply_id}
	
	</update>

	<update id="familyBenefitMonthBatch" parameterType="map">
	
		CALL SP_DJ_FAMILY_BENEFIT_MONTH_BATCH( NOW(), '1');
	
	</update>

	<update id="welfareBenefitMonthBatch" parameterType="map">
	
		CALL SP_DJ_WELFARE_BENEFIT_MONTH_BATCH( NOW(), '2');
	
	</update>

</mapper>

